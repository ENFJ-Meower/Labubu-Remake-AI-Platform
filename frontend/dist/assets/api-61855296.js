const i={baseURL:"http://localhost:8081/backend/ai-agent",timeout:3e4,headers:{"Content-Type":"application/json",Accept:"application/json"},getTenantId(){const o=JSON.parse(localStorage.getItem("userInfo")||"{}");if(!o.tenant_id){const t=`tenant_${Date.now()}`;o.tenant_id=t,localStorage.setItem("userInfo",JSON.stringify(o)),console.log("Generated default tenant ID生成默认租户ID:",t)}return o.tenant_id},endpoints:{submitDAG:"/submit",notifyReady:"/ready",getDAGStatus:"/status/{dag_id}",getResult:"/message",getAllDAGs:"/AllDag/{tenantID}"}};class c{constructor(){this.config=i}async request(t,n={}){const s=this.config.baseURL+t,a={headers:{...this.config.headers,...this.getAuthHeaders()},timeout:this.config.timeout};try{const e=await fetch(s,{...a,...n});if(!e.ok)throw new Error(`HTTP ${e.status}: ${e.statusText}`);const r=e.headers.get("content-type");return r&&r.includes("application/json")?await e.json():await e.text()}catch(e){throw console.error("API request failed API请求失败:",e),e}}getAuthHeaders(){const t=localStorage.getItem("labubu_token");return t?(console.log("Using JWT token for API authentication使用JWT令牌进行API认证"),{Authorization:`Bearer ${t}`}):(console.warn("No JWT token found, API request may fail没有找到JWT令牌，API请求可能失败"),{})}async submitDAG(t){const n={dag_id:t.dag_id,tenant_id:this.config.getTenantId(),nodes:t.nodes,edges:t.edges};return await this.request(this.config.endpoints.submitDAG,{method:"POST",body:JSON.stringify(n)})}async notifyReady(t){return await this.request(this.config.endpoints.notifyReady,{method:"POST",body:JSON.stringify({dag_id:t,tenant_id:this.config.getTenantId()})})}async getDAGStatus(t){const n=this.config.endpoints.getDAGStatus.replace("{dag_id}",t);return await this.request(n,{method:"GET"})}async getResult(t){return await this.request(this.config.endpoints.getResult,{method:"GET"})}async getAllDAGs(){const t=this.config.getTenantId(),n=this.config.endpoints.getAllDAGs.replace("{tenantID}",t);return await this.request(n,{method:"GET"})}async uploadFile(t,n){try{const s=await fetch(n,{method:"PUT",body:t,headers:{"Content-Type":t.type}});if(!s.ok)throw new Error(`File upload failed文件上传失败: ${s.statusText}`);return{success:!0,url:n.split("?")[0]}}catch(s){throw console.error("File upload failed文件上传失败:",s),s}}generateDAGId(t="dag"){const n=Date.now(),s=Math.random().toString(36).substr(2,5);return`${t}_${n}_${s}`}}const u=new c;class d{constructor(){this.baseURL="http://localhost:8081/backend/user"}async request(t,n={}){const s=`${this.baseURL}${t}`,a={headers:{"Content-Type":"application/json"},timeout:3e4};try{const e=await fetch(s,{...a,...n});if(!e.ok)throw new Error(`HTTP ${e.status}: ${e.statusText}`);const r=e.headers.get("content-type");return r&&r.includes("application/json")?await e.json():await e.text()}catch(e){throw console.error("User auth API request failed用户认证API请求失败:",e),e}}async login(t,n){return await this.request("/login",{method:"POST",body:JSON.stringify({username:t,password:n})})}async register(t,n,s,a){return await this.request("/register",{method:"POST",body:JSON.stringify({username:t,email:n,password:s,verificationCode:a})})}async sendVerificationCode(t){return await this.request("/sendCode",{method:"POST",body:JSON.stringify({email:t})})}}const l=new d;export{i as API_CONFIG,u as default,l as userAuthAPI,u as workflowAPI};
