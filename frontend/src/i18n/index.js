import { reactive, ref } from 'vue'

// ËØ≠Ë®ÄÈÖçÁΩÆ
const LANGUAGES = {
  en: {
    name: 'English',
    code: 'en',
    flag: 'üá∫üá∏'
  },
  zh: {
    name: '‰∏≠Êñá',
    code: 'zh',
    flag: 'üá®üá≥'
  }
}

// ÈªòËÆ§ËØ≠Ë®Ä
const DEFAULT_LANGUAGE = 'en'

// ÂΩìÂâçËØ≠Ë®ÄÁä∂ÊÄÅ
const currentLanguage = ref(DEFAULT_LANGUAGE)

// ÁøªËØëËµÑÊ∫ê
const translations = reactive({
  en: {
    // ÂØºËà™
    nav: {
      home: 'Home',
      aiAgent: 'AI Agent',
      community: 'Community',
      marketplace: 'Marketplace',
      profile: 'Profile',
      about: 'About',
      login: 'Login',
      register: 'Register',
      logout: 'Logout',
      logoutConfirm: 'Are you sure you want to logout?',
      logoutSuccess: 'Successfully logged out'
    },
    // ÈÄöÁî®
    common: {
      back: 'Back',
      save: 'Save',
      cancel: 'Cancel',
      confirm: 'Confirm',
      delete: 'Delete',
      edit: 'Edit',
      submit: 'Submit',
      loading: 'Loading...',
      error: 'Error',
      success: 'Success',
      warning: 'Warning',
      info: 'Info',
      close: 'Close',
      copy: 'Copy',
      regenerate: 'Regenerate',
      upload: 'Upload',
      download: 'Download',
      preview: 'Preview',
      send: 'Send',
      clear: 'Clear',
      search: 'Search',
      filter: 'Filter',
      sort: 'Sort',
      language: 'Language'
    },
    // È¶ñÈ°µ
    home: {
      title: 'Welcome to Labubu AI Platform',
      subtitle: 'Create, Share, and Explore AI-Generated Content',
      buildAgent: 'Build Agent',
      learnMore: 'Learn More',
      features: {
        aiAgent: 'AI Agent Studio',
        community: 'Creative Community',
        marketplace: 'Digital Marketplace'
      },
      descriptions: {
        aiAgent: 'Build and customize intelligent AI agents with our intuitive drag-and-drop workflow editor. Create personalized chatbots, automate complex tasks, and integrate multiple AI services including LLM, image generation, speech synthesis, and more. Perfect for businesses, creators, and developers.',
        community: 'Join a vibrant community of creators, artists, and AI enthusiasts. Share your creations, discover amazing works, participate in challenges, collaborate on projects, and learn from fellow creators. Connect, inspire, and be inspired in our creative ecosystem.',
        marketplace: 'Discover and trade unique digital creations, custom AI agents, templates, and creative assets. Buy professional tools, sell your innovations, commission custom work, and find everything you need to enhance your creative projects in our secure marketplace.',
        about: 'Labubu AI Platform is the ultimate creative ecosystem that combines cutting-edge AI technology with community collaboration. We empower creators to build, share, and monetize their innovations while fostering a supportive environment for learning and growth.'
      },
      contact: {
        title: 'Get in Touch',
        subtitle: 'Ready to start your creative journey? We\'re here to help!',
        support: 'Contact Support',
        discord: 'Join Discord'
      },
      team: {
        title: 'Our Team',
        subtitle: 'A passionate innovation team dedicated to building the best AI creative platform',
        photoPlaceholder: 'Team photo coming soon...',
        descriptionTitle: 'About Us',
        descriptionPlaceholder: 'We are a team of 5 innovative members focused on the perfect combination of AI technology and creativity. Each member brings unique professional skills and innovative perspectives, working together to create a revolutionary AI creative platform. Team description coming soon...',
        membersTitle: 'Team Members',
        rolePlaceholder: 'Role to be updated',
        memberPlaceholder: 'Personal introduction coming soon...'
      }
    },

    // AI Agent
    aiAgent: {
      title: 'AI Agent Studio',
      subtitle: 'Professional AI Agent Building Platform',
      tabs: {
        basic: 'Basic Info',
        prompt: 'Prompt Builder',
        knowledge: 'Knowledge Base',
        workflow: 'Workflow',
        multimodal: 'Multimodal',
        model: 'Model Config',
        test: 'Test & Deploy',
        workflowDesign: 'Workflow Design',
        workflowDesignDesc: 'Visual DAG workflow editor - Core feature',
        workflowManagement: 'Workflow Management',
        workflowManagementDesc: 'View and manage all DAG workflows'
      },
      actions: {
        saveAgent: 'Save Agent',
        testAgent: 'Test Agent',
        deployAgent: 'Deploy Agent',
        createNew: 'Create New Agent'
      },
      features: {
        workflow: 'Visual Workflow Editor',
        multimodal: 'Multi-AI Integration',
        automation: 'Task Automation'
      },
      workflow: {
        nodeTypes: 'Node Types',
        controlNodes: 'Control Nodes',
        aiServices: 'AI Services',
        toolNodes: 'Tool Nodes',

        conditionDesc: 'Condition Logic',
        llmDesc: 'Large Language Model Text Processing',
        sttDesc: 'Speech to Text',
        ttsDesc: 'Text to Speech',
        pic2textDesc: 'Image to Text',
        text2picDesc: 'Text to Image',
        processDesc: 'Data Processing',
        transformDesc: 'Data Transform',
        nodeConfiguration: 'Node Configuration',
        nodeName: 'Node Name',
        nodeNamePlaceholder: 'Enter node name',
        nodeDescription: 'Node Description',
        nodeDescPlaceholder: 'Describe node function',
        serviceType: 'Service Type',
        selectServiceType: 'Select Service Type',
        llmService: 'Large Language Model',
        sttService: 'Speech to Text',
        ttsService: 'Text to Speech',
        pic2textService: 'Image to Text',
        text2picService: 'Text to Image',
        nodePrompt: 'Node Prompt',
        nodePromptPlaceholder: 'Enter node prompt...',
        promptTipsSimple: 'Prompt guides AI on how to process input data',
        llmModel: 'LLM Model',
        temperature: 'Temperature',
        conservative: 'Conservative',
        creative: 'Creative',
        voiceType: 'Voice Type',
        language: 'Language',
        imageSize: 'Image Size',
        imageStyle: 'Image Style',
        conditionExpression: 'Condition Expression',
        conditionPlaceholder: 'e.g. result.length > 0',
        inputOutput: 'Input/Output',
        inputPorts: 'Input Ports',
        outputPorts: 'Output Ports',
        addInput: 'Add Input',
        addOutput: 'Add Output',
        saveConfig: 'Save',
        validateConfig: 'Validate',
        nameRequired: 'Node name is required',
        serviceRequired: 'Please select service type',
        promptRequired: 'Please configure node prompt',
        conditionRequired: 'Please configure condition expression',
        configSaved: 'Node configuration saved',
        configValid: 'Configuration validation passed!',
        noNodeSelected: 'Please select a node first',
        workflowSaved: 'Workflow saved',
        saveFailed: 'Failed to save workflow',
        testStarted: 'Workflow test started',
        testFailed: 'Failed to test workflow',
        deploySuccess: 'Workflow deployed and saved to records successfully',
        deployFailed: 'Failed to deploy workflow',

        // ÈªòËÆ§ÊèêÁ§∫ËØç
        defaultPrompts: {
          condition: 'Evaluate the input content and return true or false based on the condition.',
          llm: 'Please provide a helpful response based on the input content, keeping it accurate, concise, and useful.',
          stt: 'Please accurately convert the audio to text, maintaining natural sentence structure and proper punctuation.',
          tts: 'Please read the text in a natural, clear voice with appropriate speed and natural intonation.',
          pic2text: 'Please recognize all text content in the image, maintaining the original layout structure and accurately extracting text information.',
          text2pic: 'Generate a high-quality image based on the description with reasonable composition, harmonious colors, and rich details.',
          process: 'Process and analyze the input data, extract useful information and organize the output.',
          transform: 'Transform the input data to the specified format while maintaining data integrity and accuracy.'
        },

        nodeConfigIncomplete: 'Node configuration incomplete',
        nodes: 'Nodes',
        connections: 'Connections',
        status: 'Status',
        clearCanvas: 'Clear Canvas',
        saveWorkflow: 'Save Workflow',
        testWorkflow: 'Test Workflow',
        deployWorkflow: 'Deploy',
        zoomIn: 'Zoom In',
        zoomOut: 'Zoom Out',
        resetZoom: 'Reset Zoom',
        fitToScreen: 'Fit to Screen',
        // ËäÇÁÇπÂêçÁß∞
        conditionNode: 'Condition',
        llmNode: 'LLM',
        sttNode: 'STT',
        ttsNode: 'TTS',
        pic2textNode: 'Pic2Text',
        text2picNode: 'Text2Pic',
        processNode: 'Process',
        transformNode: 'Transform',
        // ËøûÊé•ÁÇπ
        inputPort: 'IN',
        outputPort: 'OUT',
        // Ê®°ÂûãÈÄâÈ°π
        models: {
          gpt4: 'GPT-4',
          gpt35turbo: 'GPT-3.5 Turbo',
          claude3: 'Claude-3',
          llama2: 'Llama-2',
          whisper1: 'Whisper-1',
          tts1: 'TTS-1',
          tts1hd: 'TTS-1-HD',
          dalle3: 'DALL-E 3',
          dalle2: 'DALL-E 2'
        },
        // ËØ≠Èü≥ÈÄâÈ°π
        voices: {
          alloy: 'Alloy',
          echo: 'Echo',
          fable: 'Fable',
          onyx: 'Onyx',
          nova: 'Nova',
          shimmer: 'Shimmer'
        },
        // ËØ≠Ë®ÄÈÄâÈ°π
        languages: {
          chinese: 'Chinese',
          english: 'English',
          japanese: 'Japanese',
          korean: 'Korean'
        },
        // Ê†ºÂºèÈÄâÈ°π
        formats: {
          mp3: 'MP3',
          opus: 'Opus',
          aac: 'AAC',
          flac: 'FLAC',
          wav: 'WAV',
          pcm: 'PCM',
          json: 'JSON',
          text: 'Text',
          srt: 'SRT',
          verboseJson: 'Verbose JSON',
          vtt: 'VTT',
          plainText: 'Plain Text',
          markdown: 'Markdown',
          url: 'URL Link',
          base64: 'Base64 Encoded'
        },
        // ÈÖçÁΩÆÊ†áÁ≠æ
        labels: {
          maxTokens: 'Max Tokens',
          topP: 'Top P',
          ttsModel: 'TTS Model',
          audioFormat: 'Audio Format',
          speechSpeed: 'Speech Speed',
          sttModel: 'STT Model',
          responseFormat: 'Response Format',
          recognitionLanguage: 'Recognition Language',
          outputFormat: 'Output Format',
          detailLevel: 'Detail Level',
          imageModel: 'Image Model',
          imageCount: 'Image Count',
          userIdentifier: 'User Identifier',
          conditionExpression: 'Condition Expression',
          retryCount: 'Retry Count',
          retryInterval: 'Retry Interval (ms)',
          timeoutSeconds: 'Timeout (s)',
          errorHandling: 'Error Handling',
          fallbackValue: 'Fallback Value',
          portName: 'Port Name',
          dataType: 'Data Type'
        },
        // Â∏ÆÂä©ÊñáÊú¨
        helpTexts: {
          stopSequences: 'LLM will stop generating when encountering these sequences, one per line',
          userIdForMonitoring: 'For monitoring and abuse prevention, recommend using UUID',
          logitBias: 'Adjust probability of specific tokens, JSON object format',
          audioFormatHelp: 'Choose audio output format, affects file size and quality',
          maxTokensHelp: 'Limit maximum length of output text',
          conditionHelp: 'Supports JavaScript expressions, can reference input data using variable names',
          retryHelp: 'Number of retries when node execution fails',
          retryIntervalHelp: 'Wait time between retries',
          timeoutHelp: 'Maximum wait time for node execution',
          errorHandlingHelp: 'Choose how to handle errors',
          fallbackHelp: 'Default value to use when node execution fails',
          imageCountHelp: 'Number of images to generate at once, DALL-E 3 supports max 1',
          userIdImageHelp: 'For monitoring and abuse prevention, recommend using UUID'
        },
        // Â∞∫ÂØ∏ÈÄâÈ°π
        imageSizes: {
          size256: '256x256',
          size512: '512x512',
          size1024: '1024x1024',
          size1792x1024: '1792x1024 (Landscape)',
          size1024x1792: '1024x1792 (Portrait)'
        },
        // Êï∞ÊçÆÁ±ªÂûã
        dataTypes: {
          text: 'Text',
          image: 'Image',
          audio: 'Audio',
          file: 'File',
          json: 'JSON'
        },
        // ÈîôËØØÂ§ÑÁêÜÈÄâÈ°π
        errorHandlingOptions: {
          stop: 'Stop Workflow',
          continue: 'Continue Execution',
          retry: 'Retry Execution',
          fallback: 'Use Fallback Value'
        },
        // ËØ¶ÁªÜÁ®ãÂ∫¶ÈÄâÈ°π
        detailLevels: {
          low: 'Low - Fast Processing',
          high: 'High - Detailed Analysis',
          auto: 'Auto - Smart Selection'
        },
        // ÁéØÂ¢ÉÈÄâÈ°π
        environments: {
          development: 'Development',
          testing: 'Testing',
          production: 'Production'
        },
        // È°µÈù¢Ê†áÈ¢òÂíåÊèèËø∞
        workflowManagement: {
          title: 'Workflow Management',
          description: 'View and manage all your DAG workflows',
          runningLabel: 'Running',
          totalWorkflows: 'Total Workflows',
          runningWorkflows: 'Running',
          completedWorkflows: 'Completed',
          failedWorkflows: 'Failed',
          searchPlaceholder: 'Search workflows...',
          refresh: 'Refresh',
          noWorkflows: 'No Workflows',
          noWorkflowsDescription: 'You haven\'t created any workflows yet. Start designing your first workflow!',
          createWorkflow: 'Create Workflow',
          nodeCount: 'Node Count:',
          createdAt: 'Created At:',
          viewStatus: 'View Status',
          viewResults: 'View Results',
          clone: 'Clone',
          deleteWorkflow: 'Delete',
          loading: 'Loading workflow list...',
          loadError: 'Load Failed',
          retry: 'Retry',
          close: 'Close',
          refreshStatus: 'Refresh Status',
          refreshStatusFailed: 'Failed to refresh status'
        },
        inputData: 'Input Data Configuration',
        inputContent: 'Input Content',
        inputTextPlaceholder: 'Enter text content...',
        uploadImage: 'Upload Image',
        uploadAudio: 'Upload Audio',
        uploadFile: 'Upload File',
        clickToUpload: 'Click to upload image',
        clickToUploadAudio: 'Click to upload audio',
        clickToUploadFile: 'Click to upload file',
        supportedFormats: 'Supports JPG, PNG, GIF, BMP, WEBP, SVG formats, auto-converted to JPEG',
        audioFormats: 'Supports MP3, WAV, OGG formats, auto-set to WAV format',
        inputJson: 'JSON Data',
        jsonPlaceholder: 'Enter JSON format data...',
        jsonHint: 'Please enter valid JSON format data',
        configurationPanel: 'Configuration Panel',
        selectNodeToConfig: 'Select Node to Configure',
        configInstructions: 'Please follow these steps:',
        step1: 'Drag nodes from left sidebar to canvas',
        step2: 'Click on a node to select it',
        step2Detail: 'Click the node itself, not the connection points',
        step3: 'Configure node parameters here',
        step4: 'Set input data (text, images, etc.)',
        step4Detail: 'Input in the "Input Data Configuration" section below',
        tipInputLocation: 'Input Text Location: After selecting a node, scroll down to find the "Input Data Configuration" section',
        tip1: 'LLM nodes accept text input, can process other formats through workflow connections',
        tip2: 'Drag connection points to create data flows',
        tip3: 'Test and deploy workflow after configuration',

        // Âø´Êç∑ÈîÆ
        shortcuts: {
          keyboardGuide: 'Keyboard Shortcuts Guide',
          editOperations: 'Edit Operations',
          workflowOperations: 'Workflow Operations',
          canvasOperations: 'Canvas Operations',
          undo: 'Undo',
          redo: 'Redo',
          copySelectedNode: 'Copy Selected Node',
          pasteNode: 'Paste Node',
          deleteSelectedNode: 'Delete Selected Node',
          saveWorkflow: 'Save Workflow',
          selectAllNodes: 'Select All Nodes',
          zoomCanvas: 'Zoom Canvas',
          moveCanvas: 'Move Canvas',
          selectNode: 'Select Node',
          dragNode: 'Drag Node',
          mouseWheel: 'Mouse Wheel',
          dragBlankArea: 'Drag Blank Area',
          clickNode: 'Click Node',
          dragToConnect: 'Drag to create connection'
        },
        // Áä∂ÊÄÅÂÄº
        statusValues: {
          ready: 'Ready',
          running: 'Running',
          completed: 'Completed',
          failed: 'Failed',
          empty: 'Empty',
          unnamed: 'Unnamed Workflow',
          deployed: 'Deployed',
          pending: 'Pending'
        },
        // Â∑•ÂÖ∑Ê†èÊåâÈíÆ
        toolbar: {
          clear: 'Clear',
          save: 'Save',
          saveWorkflow: 'Save Workflow',
          testWorkflow: 'Test Workflow',
          deployWorkflow: 'Deploy Workflow',
          redeployWorkflow: 'Redeploy',
          designer: 'Designer',
          dagWorkflow: 'DAG Workflow'
        },
        // Áä∂ÊÄÅÁ≠õÈÄâÂô®
        statusFilters: {
          all: 'All',
          running: 'Running',
          completed: 'Completed',
          failed: 'Failed',
          pending: 'Pending'
        },
        // ËäÇÁÇπÊèèËø∞
        nodeDescriptions: {
          workflowStart: 'Workflow start',
          workflowEnd: 'Workflow end',
          conditionJudgment: 'Condition judgment',
          dataProcessing: 'Data processing',
          dataTransformation: 'Data transformation'
        },
        // Á´ØÂè£ÈÖçÁΩÆ
        ports: {
          trigger: 'trigger',
          result: 'result',
          input: 'input',
          output: 'output',
          true: 'true',
          false: 'false',
          prompt: 'prompt',
          response: 'response',
          audio: 'audio',
          text: 'text',
          image: 'image'
        },
        // È¢ùÂ§ñÁöÑÁøªËØëÈ°π
        inputPortsLabel: 'üîΩ Input:',
        outputPortsLabel: 'üîº Output:',
        generalConfig: 'General Configuration',
        retryCount: 'Retry Count',
        retryCountPlaceholder: '3',
        retryCountHelp: 'Number of retries when node execution fails',
        retryInterval: 'Retry Interval(ms)',
        retryIntervalPlaceholder: '1000',
        retryIntervalHelp: 'Wait time between each retry',
        executionTimeout: 'Execution Timeout(s)',
        executionTimeoutPlaceholder: '30',
        executionTimeoutHelp: 'Maximum wait time for node execution',
        errorHandling: 'Error Handling',
        errorHandlingHelp: 'Choose how to handle errors',
        fallbackValue: 'Fallback Value',
        fallbackValuePlaceholder: 'Default value to use on error',
        fallbackValueHelp: 'Fallback value when node execution fails',
        portNamePlaceholder: 'Port Name',
        portTypes: {
          text: 'Text',
          image: 'Image',
          audio: 'Audio',
          file: 'File',
          json: 'JSON'
        },
        unknown: 'Unknown',
        jsExpressionHelp: 'Supports JavaScript expressions, can reference input data using variable names',
        fromNode: 'From Node',
        toNode: 'To Node',
        connectionConfiguration: 'Connection Configuration',
        connectionPrompt: 'Connection Prompt',
        connectionPromptPlaceholder: 'Enter connection prompt for data transformation during passing...',
        connectionPromptTips: 'Connection prompt defines transformation logic for data passing between nodes, can include variables like {input_data}',
        connectionDescription: 'Connection Description',
        connectionDescPlaceholder: 'Describe this connection\'s purpose...',
        saveConnection: 'Save Connection',
        deleteConnection: 'Delete Connection',
        // ÈîôËØØÊ∂àÊÅØ
        errors: {
          dataTypeIncompatible: 'Data type incompatible: {outputNode} outputs {outputType} type, but {inputNode} only accepts {inputType} type input'
        }
      }
    },
    // Á§æÂå∫
    community: {
      title: 'Creative Community',
      subtitle: 'Share your creativity with the world',
      heroTitle: 'Creative Notes Community',
      heroSubtitle: 'Share your creative ideas and discover more inspiration',
      totalNotes: 'Total Notes',
      todayNotes: 'Today',
      activeTags: 'Active Tags',
      searchPlaceholder: 'Search note content, tags, or authors...',
      trendingTags: 'Trending Tags',
      shareNote: 'Share your creative note...',
      noNotes: 'No Notes',
      noNotesDesc: 'Come and publish your first note!',
      loading: 'Loading...',
      publish: 'Publish Note',
      selectWorkflow: 'Select AI Agent Workflow',
      addComment: 'Add comment...',
      send: 'Send',
      tryWorkflow: 'Try',
      loadMore: 'Load More',
      // Labubu‰ªãÁªç
      labubu: {
        welcomeTitle: 'Welcome to Labubu\'s Creative World!',
        welcomeText: 'Here, every creative idea is as charming and surprising as Labubu. Let\'s explore the infinite possibilities of AI together and light up every corner of the digital world with warm creativity.',
        features: {
          creativity: 'Unlimited Creativity',
          sharing: 'Inspiration Sharing',
          ai: 'AI Powered',
          community: 'Warm Community'
        }
      },
      // Êó∂Èó¥ÊòæÁ§∫
      timeAgo: {
        minutesAgo: '{count} minutes ago',
        minuteAgo: '1 minute ago',
        hoursAgo: '{count} hours ago',
        hourAgo: '1 hour ago',
        daysAgo: '{count} days ago',
        dayAgo: '1 day ago',
        weeksAgo: '{count} weeks ago',
        weekAgo: '1 week ago',
        monthsAgo: '{count} months ago',
        monthAgo: '1 month ago',
        yearsAgo: '{count} years ago',
        yearAgo: '1 year ago',
        justNow: 'Just now'
      },
      filters: {
        all: 'All',
        text: 'Text',
        image: 'Image', 
        video: 'Video',
        workflow: 'Workflow'
      },
      noteTypes: {
        text: 'Text Note',
        image: 'Image Share',
        video: 'Video Share',
        workflow: 'AI Workflow'
      },
      tags: {
        aiCreation: 'AI Creation',
        labubu: 'Labubu',
        designInspiration: 'Design Inspiration',
        photographyTips: 'Photography Tips',
        programmingNotes: 'Programming Notes',
        lifeRecords: 'Life Records',
        learningInsights: 'Learning Insights',
        workflows: 'Workflows',
        creativeIdeas: 'Creative Ideas',
        techSharing: 'Tech Sharing'
      },
      placeholders: {
        text: 'Share your thoughts, experiences, or inspiration...',
        image: 'Add description for your images...',
        video: 'Add description for your video...',
        workflow: 'Introduce your AI workflow functions and uses...'
      },
      uploadTexts: {
        image: 'Click or drag to upload images',
        video: 'Click or drag to upload video'
      },
      tabs: {
        feed: 'Feed',
        gallery: 'Gallery',
        events: 'Events',
        groups: 'Groups'
      },
      actions: {
        createPost: 'Create Post',
        like: 'Like',
        comment: 'Comment',
        share: 'Share',
        follow: 'Follow',
        joinGroup: 'Join Group',
        leaveGroup: 'Leave Group'
      },
      features: {
        connect: 'Creator Network',
        challenges: 'Creative Challenges',
        showcase: 'Portfolio Showcase'
      }
    },
    // Â∏ÇÂú∫
    marketplace: {
      title: 'Creative Marketplace',
      subtitle: 'Discover and trade digital creations',
      categories: {
        artworks: 'Artworks',
        music: 'Music',
        videos: 'Videos',
        tools: 'Tools'
      },
      actions: {
        buy: 'Buy',
        sell: 'Sell',
        addToCart: 'Add to Cart',
        checkout: 'Checkout'
      },
      features: {
        assets: 'Digital Assets',
        secure: 'Secure Trading',
        monetize: 'Monetize Creations'
      }
    },
    // ÂÖ≥‰∫é
    about: {
      title: 'About Labubu AI Platform',
      subtitle: 'Learn more about our platform and mission',
      sections: {
        mission: 'Our Mission',
        features: 'Key Features',
        technology: 'Technology Stack',
        team: 'Our Team'
      },
      features: {
        innovation: 'AI Innovation',
        collaboration: 'Community Spirit',
        growth: 'Creator Growth'
      }
    },
    // ÁôªÂΩï
    login: {
      title: 'LABUBU AI',
      username: 'Username',
      password: 'Password',
      usernamePlaceholder: 'Enter username',
      passwordPlaceholder: 'Enter password',
      rememberMe: 'Remember me',
      forgotPassword: 'Forgot password?',
      loginButton: 'Login',
      loggingIn: 'Logging In',
      loadingTip: 'Login verification may take some time, please wait patiently...',
      noAccount: 'Don\'t have an account?',
      registerNow: 'Register now',
      passwordError: 'Password must be at least 8 characters with letters and special characters',
      forgotMessage: 'Please contact admin to reset password.',
      registerMessage: 'Registration feature is not yet open.',
      loginFailed: 'Login failed',
      loginSuccess: 'Login successful',
      usernameRequired: 'Please enter username',
      passwordRequired: 'Please enter password'
    },
    // Ê≥®ÂÜå
    register: {
      title: 'Create New Account',
      username: 'Username',
      email: 'Email',
      password: 'Password',
      confirmPassword: 'Confirm Password',
      verificationCode: 'Verification Code',
      usernamePlaceholder: 'Enter username',
      emailPlaceholder: 'Enter email',
      passwordPlaceholder: 'Enter password',
      passwordHint: 'Password requirements: 8-16 characters, including at least two of: uppercase letters, lowercase letters, digits',
      confirmPasswordPlaceholder: 'Enter password again',
      codePlaceholder: 'Enter verification code',
      getCode: 'Get Code',
      registerButton: 'Register',
      registering: 'Registering',
      registeringTip: 'Account registration verification may take some time, please wait patiently...',
      hasAccount: 'Already have an account?',
      goLogin: 'Go to login',
      completeInfo: 'Please fill in complete information',
      usernameError: 'Username must be 4-20 characters (letters, numbers, or underscores)',
      emailError: 'Please enter a valid email address',
      passwordError: 'Password must be at least 8 characters with letters and special characters',
      confirmError: 'The two passwords do not match',
      codeError: 'Please enter verification code',
      registerSuccess: 'Registration successful!',
      getCode: 'Get Code',
      sending: 'Sending...',
      sentCountdown: 'Sent (180s)',
      sentTime: 'Sent ({time}s)',
      sendingCode: 'Sending verification code',
      loadingTip: 'Email verification may take some time, please wait patiently...',
      codeSuccess: 'Verification code has been sent to your email, please check!',
      emailFormatError: 'Invalid email format',
      usernameRequired: 'Please enter username',
      usernameLength: 'Username must be longer than 2 characters',
      passwordLength: 'Password length must be 8-16 characters',
      passwordComplexity: 'Password must include at least two of: uppercase letters, lowercase letters, digits',
      passwordMismatch: 'The two passwords do not match',
      invalidCode: 'Verification code is invalid or expired',
      serverError: 'Server error, please try again later',
      sendCodeError: 'Failed to send verification code',
      sendCodeFailed: 'Failed to send verification code',
      registerFailed: 'Registration failed'
    },
    // ‰∏™‰∫∫‰∏≠ÂøÉ
    profile: {
      aiAgents: 'AI Agents',
      posts: 'Posts',
      transactions: 'Transactions',
      editProfile: 'Edit Profile',
      share: 'Share',
      myAIAgents: 'My AI Agents',
      createAgent: 'Create New Agent',
      myCommunityContent: 'My Community Content',
      createPost: 'Create Post',
      marketplace: 'Marketplace',
      settings: 'Settings',
      community: 'Community',
      mySelling: 'My Products',
      purchases: 'Purchases',
      sales: 'Sales',
      myProducts: 'My Products',
      addProduct: 'Add Product',
      purchaseHistory: 'Purchase History',
      salesHistory: 'Sales History',
      accountSettings: 'Account Settings',
      privacy: 'Privacy Settings',
      notifications: 'Notification Settings',
      username: 'Username',
      email: 'Email',
      bio: 'Bio',
      bioPlaceholder: 'Tell us about yourself...',
      publicProfile: 'Public Profile',
      publicProfileDesc: 'Allow others to view your profile',
      showActivity: 'Show Activity',
      showActivityDesc: 'Display your recent activities',
      emailNotifications: 'Email Notifications',
      emailNotificationsDesc: 'Receive notifications via email',
      marketingEmails: 'Marketing Emails',
      marketingEmailsDesc: 'Receive promotional content',
      saveChanges: 'Save Changes',
      deleteAccount: 'Delete Account',
      deleteAccountConfirm: 'Are you sure you want to delete your account? This action cannot be undone!',
      runs: 'Runs',
      success: 'Success Rate',
      edit: 'Edit',
      run: 'Run',
      delete: 'Delete',
      view: 'View',
      stats: 'Stats',
      seller: 'Seller',
      buyer: 'Buyer',
      viewOrder: 'View Order',
      review: 'Review',
      process: 'Process',
      selectAvatar: 'Select Avatar',
      avatarTip: 'Choose a favorite avatar as your personal image',
      cancel: 'Cancel',
      confirm: 'Confirm',
      avatarUpdated: 'Avatar updated successfully!',
      avatarUpdateFailed: 'Failed to update avatar, please try again',
      avatarEditMsg: 'Avatar editing feature coming soon',
      profileEditMsg: 'Profile editing feature coming soon',
      linkCopied: 'Link copied to clipboard',
      settingsSaved: 'Settings saved',
      deleteAccountMsg: 'Account deletion requires contacting customer service',
      status: {
        active: 'Active',
        draft: 'Draft',
        inactive: 'Inactive'
      },
      postType: {
        artwork: 'Artwork',
        tutorial: 'Tutorial',
        discussion: 'Discussion',
        showcase: 'Showcase'
      },
      productStatus: {
        active: 'Active',
        sold_out: 'Sold Out',
        draft: 'Draft'
      },
      transactionStatus: {
        pending: 'Pending',
        completed: 'Completed',
        delivered: 'Delivered',
        cancelled: 'Cancelled'
      }
    }
  },
  zh: {
    // ÂØºËà™
    nav: {
      home: 'È¶ñÈ°µ',
      aiAgent: 'AIÊô∫ËÉΩ‰Ωì',
      community: 'Á§æÂå∫',
      marketplace: 'Â∏ÇÂú∫',
      profile: '‰∏™‰∫∫‰∏≠ÂøÉ',
      about: 'ÂÖ≥‰∫é',
      login: 'ÁôªÂΩï',
      register: 'Ê≥®ÂÜå',
      logout: 'ÁôªÂá∫',
      logoutConfirm: 'Á°ÆÂÆöË¶ÅÁôªÂá∫ÂêóÔºü',
      logoutSuccess: 'Â∑≤ÊàêÂäüÁôªÂá∫'
    },
    // ÈÄöÁî®
    common: {
      back: 'ËøîÂõû',
      save: '‰øùÂ≠ò',
      cancel: 'ÂèñÊ∂à',
      confirm: 'Á°ÆËÆ§',
      delete: 'Âà†Èô§',
      edit: 'ÁºñËæë',
      submit: 'Êèê‰∫§',
      loading: 'Âä†ËΩΩ‰∏≠...',
      error: 'ÈîôËØØ',
      success: 'ÊàêÂäü',
      warning: 'Ë≠¶Âëä',
      info: '‰ø°ÊÅØ',
      close: 'ÂÖ≥Èó≠',
      copy: 'Â§çÂà∂',
      regenerate: 'ÈáçÊñ∞ÁîüÊàê',
      upload: '‰∏ä‰º†',
      download: '‰∏ãËΩΩ',
      preview: 'È¢ÑËßà',
      send: 'ÂèëÈÄÅ',
      clear: 'Ê∏ÖÈô§',
      search: 'ÊêúÁ¥¢',
      filter: 'Á≠õÈÄâ',
      sort: 'ÊéíÂ∫è',
      language: 'ËØ≠Ë®Ä'
    },
    // È¶ñÈ°µ
    home: {
      title: 'Ê¨¢ËøéÊù•Âà∞Labubu AIÂπ≥Âè∞',
      subtitle: 'ÂàõÈÄ†„ÄÅÂàÜ‰∫´ÂíåÊé¢Á¥¢AIÁîüÊàêÂÜÖÂÆπ',
      buildAgent: 'ÊûÑÂª∫Êô∫ËÉΩ‰Ωì',
      learnMore: '‰∫ÜËß£Êõ¥Â§ö',
      features: {
        aiAgent: 'AIÊô∫ËÉΩ‰ΩìÂ∑•‰ΩúÂÆ§',
        community: 'ÂàõÊÑèÁ§æÂå∫',
        marketplace: 'Êï∞Â≠óÂ∏ÇÂú∫'
      },
      descriptions: {
        aiAgent: '‰ΩøÁî®Êàë‰ª¨Áõ¥ËßÇÁöÑÊãñÊãΩÂºèÂ∑•‰ΩúÊµÅÁºñËæëÂô®ÊûÑÂª∫ÂíåÂÆöÂà∂Êô∫ËÉΩAI‰ª£ÁêÜ„ÄÇÂàõÂª∫‰∏™ÊÄßÂåñËÅäÂ§©Êú∫Âô®‰∫∫ÔºåËá™Âä®ÂåñÂ§çÊùÇ‰ªªÂä°ÔºåÊï¥ÂêàÂ§öÁßçAIÊúçÂä°ÂåÖÊã¨Â§ßËØ≠Ë®ÄÊ®°Âûã„ÄÅÂõæÂÉèÁîüÊàê„ÄÅËØ≠Èü≥ÂêàÊàêÁ≠â„ÄÇÈÄÇÂêà‰ºÅ‰∏ö„ÄÅÂàõ‰ΩúËÄÖÂíåÂºÄÂèëËÄÖ‰ΩøÁî®„ÄÇ',
        community: 'Âä†ÂÖ•Áî±Âàõ‰ΩúËÄÖ„ÄÅËâ∫ÊúØÂÆ∂ÂíåAIÁà±Â•ΩËÄÖÁªÑÊàêÁöÑÊ¥ªË∑ÉÁ§æÂå∫„ÄÇÂàÜ‰∫´ÊÇ®ÁöÑÂàõ‰ΩúÔºåÂèëÁé∞Á≤æÂΩ©‰ΩúÂìÅÔºåÂèÇ‰∏éÊåëÊàòËµõÔºåÂçè‰ΩúÈ°πÁõÆÔºåÂêëÂêåË°åÂ≠¶‰π†„ÄÇÂú®Êàë‰ª¨ÁöÑÂàõÊÑèÁîüÊÄÅÁ≥ªÁªü‰∏≠ËøûÊé•„ÄÅÂêØÂèëÂπ∂Ëé∑ÂæóÁÅµÊÑü„ÄÇ',
        marketplace: 'Êé¢Á¥¢Âíå‰∫§ÊòìÁã¨ÁâπÁöÑÊï∞Â≠óÂàõ‰Ωú„ÄÅÂÆöÂà∂AI‰ª£ÁêÜ„ÄÅÊ®°ÊùøÂíåÂàõÊÑèËµÑ‰∫ß„ÄÇË¥≠‰π∞‰∏ì‰∏öÂ∑•ÂÖ∑ÔºåÂá∫ÂîÆÊÇ®ÁöÑÂàõÊñ∞‰ΩúÂìÅÔºåÂßîÊâòÂÆöÂà∂Â∑•‰ΩúÔºåÂú®Êàë‰ª¨ÂÆâÂÖ®ÁöÑÂ∏ÇÂú∫‰∏≠ÊâæÂà∞Â¢ûÂº∫ÂàõÊÑèÈ°πÁõÆÊâÄÈúÄÁöÑ‰∏ÄÂàá„ÄÇ',
        about: 'Labubu AIÂπ≥Âè∞ÊòØÁªìÂêàÂâçÊ≤øAIÊäÄÊúØ‰∏éÁ§æÂå∫Âçè‰ΩúÁöÑÁªàÊûÅÂàõÊÑèÁîüÊÄÅÁ≥ªÁªü„ÄÇÊàë‰ª¨ËµãËÉΩÂàõ‰ΩúËÄÖÊûÑÂª∫„ÄÅÂàÜ‰∫´ÂíåÂèòÁé∞‰ªñ‰ª¨ÁöÑÂàõÊñ∞ÔºåÂêåÊó∂Ëê•ÈÄ†ÊîØÊåÅÂ≠¶‰π†ÂíåÊàêÈïøÁöÑÁéØÂ¢É„ÄÇ'
      },
      contact: {
        title: 'ËÅîÁ≥ªÊàë‰ª¨',
        subtitle: 'ÂáÜÂ§áÂºÄÂßãÊÇ®ÁöÑÂàõÊÑè‰πãÊóÖ‰∫ÜÂêóÔºüÊàë‰ª¨ÈöèÊó∂‰∏∫ÊÇ®Êèê‰æõÂ∏ÆÂä©ÔºÅ',
        support: 'ËÅîÁ≥ªÊîØÊåÅ',
        discord: 'Âä†ÂÖ•Discord'
      },
      team: {
        title: 'Êàë‰ª¨ÁöÑÂõ¢Èòü',
        subtitle: 'ÂÖÖÊª°ÊøÄÊÉÖÁöÑÂàõÊñ∞Âõ¢ÈòüÔºåËá¥Âäõ‰∫éÊâìÈÄ†ÊúÄ‰ºòÁßÄÁöÑAIÂàõ‰ΩúÂπ≥Âè∞',
        photoPlaceholder: 'Âõ¢ÈòüÁÖßÁâáÂç≥Â∞Ü‰∏ä‰º†...',
        descriptionTitle: 'ÂÖ≥‰∫éÊàë‰ª¨',
        descriptionPlaceholder: 'Êàë‰ª¨ÊòØ‰∏ÄÊîØÁî±5ÂêçÂÖÖÊª°ÂàõÊñ∞Á≤æÁ•ûÁöÑÊàêÂëòÁªÑÊàêÁöÑÂõ¢ÈòüÔºå‰∏ìÊ≥®‰∫éAIÊäÄÊúØ‰∏éÂàõÊÑèÁöÑÂÆåÁæéÁªìÂêà„ÄÇÊØè‰∏™ÊàêÂëòÈÉΩÂ∏¶Êù•‰∫ÜÁã¨ÁâπÁöÑ‰∏ì‰∏öÊäÄËÉΩÂíåÂàõÊñ∞ËßÜËßíÔºåÂÖ±ÂêåËá¥Âäõ‰∫éÊâìÈÄ†Èù©ÂëΩÊÄßÁöÑAIÂàõ‰ΩúÂπ≥Âè∞„ÄÇÂõ¢Èòü‰ªãÁªçÂÜÖÂÆπÂç≥Â∞ÜÊõ¥Êñ∞...',
        membersTitle: 'Âõ¢ÈòüÊàêÂëò',
        rolePlaceholder: 'ËÅå‰ΩçÂæÖÊõ¥Êñ∞',
        memberPlaceholder: '‰∏™‰∫∫‰ªãÁªçÂç≥Â∞ÜÊõ¥Êñ∞...'
      }
    },

    // AI Agent
    aiAgent: {
      title: 'AIÊô∫ËÉΩ‰ΩìÂ∑•‰ΩúÂÆ§',
      subtitle: '‰∏ì‰∏öÁöÑAIÊô∫ËÉΩ‰ΩìÊûÑÂª∫Âπ≥Âè∞',
      tabs: {
        basic: 'Âü∫Á°Ä‰ø°ÊÅØ',
        prompt: 'ÊèêÁ§∫ËØçÊûÑÂª∫',
        knowledge: 'Áü•ËØÜÂ∫ì',
        workflow: 'Â∑•‰ΩúÊµÅ',
        multimodal: 'Â§öÊ®°ÊÄÅ',
        model: 'Ê®°ÂûãÈÖçÁΩÆ',
        test: 'ÊµãËØï‰∏éÈÉ®ÁΩ≤',
        workflowDesign: 'Â∑•‰ΩúÊµÅËÆæËÆ°',
        workflowDesignDesc: 'ÂèØËßÜÂåñDAGÂ∑•‰ΩúÊµÅÁºñËæëÂô® - Ê†∏ÂøÉÂäüËÉΩ',
        workflowManagement: 'Â∑•‰ΩúÊµÅÁÆ°ÁêÜ',
        workflowManagementDesc: 'Êü•ÁúãÂíåÁÆ°ÁêÜÊÇ®ÁöÑÊâÄÊúâDAGÂ∑•‰ΩúÊµÅ'
      },
      actions: {
        saveAgent: '‰øùÂ≠òÊô∫ËÉΩ‰Ωì',
        testAgent: 'ÊµãËØïÊô∫ËÉΩ‰Ωì',
        deployAgent: 'ÈÉ®ÁΩ≤Êô∫ËÉΩ‰Ωì',
        createNew: 'ÂàõÂª∫Êñ∞Êô∫ËÉΩ‰Ωì'
      },
      features: {
        workflow: 'ÂèØËßÜÂåñÂ∑•‰ΩúÊµÅÁºñËæë',
        multimodal: 'Â§öAIÊúçÂä°ÈõÜÊàê',
        automation: '‰ªªÂä°Ëá™Âä®Âåñ'
      },
      workflow: {
        nodeTypes: 'ËäÇÁÇπÁ±ªÂûã',
        controlNodes: 'ÊéßÂà∂ËäÇÁÇπ',
        aiServices: 'AIÊúçÂä°',
        toolNodes: 'Â∑•ÂÖ∑ËäÇÁÇπ',

        conditionDesc: 'Êù°‰ª∂Âà§Êñ≠',
        llmDesc: 'Â§ßËØ≠Ë®ÄÊ®°ÂûãÊñáÊú¨Â§ÑÁêÜ',
        sttDesc: 'ËØ≠Èü≥ËΩ¨ÊñáÂ≠ó',
        ttsDesc: 'ÊñáÂ≠óËΩ¨ËØ≠Èü≥',
        pic2textDesc: 'ÂõæÁâáËΩ¨ÊñáÂ≠ó',
        text2picDesc: 'ÊñáÂ≠óËΩ¨ÂõæÁâá',
        processDesc: 'Êï∞ÊçÆÂ§ÑÁêÜ',
        transformDesc: 'Êï∞ÊçÆËΩ¨Êç¢',
        nodeConfiguration: 'ËäÇÁÇπÈÖçÁΩÆ',
        nodeName: 'ËäÇÁÇπÂêçÁß∞',
        nodeNamePlaceholder: 'ËæìÂÖ•ËäÇÁÇπÂêçÁß∞',
        nodeDescription: 'ËäÇÁÇπÊèèËø∞',
        nodeDescPlaceholder: 'ÊèèËø∞ËäÇÁÇπÂäüËÉΩ',
        serviceType: 'ÊúçÂä°Á±ªÂûã',
        selectServiceType: 'ÈÄâÊã©ÊúçÂä°Á±ªÂûã',
        llmService: 'Â§ßËØ≠Ë®ÄÊ®°Âûã',
        sttService: 'ËØ≠Èü≥ËΩ¨ÊñáÂ≠ó',
        ttsService: 'ÊñáÂ≠óËΩ¨ËØ≠Èü≥',
        pic2textService: 'ÂõæÁâáËΩ¨ÊñáÂ≠ó',
        text2picService: 'ÊñáÂ≠óËΩ¨ÂõæÁâá',
        nodePrompt: 'ËäÇÁÇπÊèêÁ§∫ËØç',
        nodePromptPlaceholder: 'ËæìÂÖ•ËäÇÁÇπÁöÑÊèêÁ§∫ËØç...',
        promptTipsSimple: 'ÊèêÁ§∫ËØçÁî®‰∫éÊåáÂØºAIÂ¶Ç‰ΩïÂ§ÑÁêÜËæìÂÖ•Êï∞ÊçÆ',
        llmModel: 'LLMÊ®°Âûã',
        temperature: 'Ê∏©Â∫¶ÂÄº',
        conservative: '‰øùÂÆà',
        creative: 'ÂàõÈÄ†',
        voiceType: 'ËØ≠Èü≥Á±ªÂûã',
        language: 'ËØ≠Ë®Ä',
        imageSize: 'ÂõæÁâáÂ∞∫ÂØ∏',
        imageStyle: 'ÂõæÁâáÈ£éÊ†º',
        conditionExpression: 'Êù°‰ª∂Ë°®ËææÂºè',
        conditionPlaceholder: '‰æãÂ¶ÇÔºöresult.length > 0',
        inputOutput: 'ËæìÂÖ•ËæìÂá∫',
        inputPorts: 'ËæìÂÖ•Á´ØÂè£',
        outputPorts: 'ËæìÂá∫Á´ØÂè£',
        addInput: 'Ê∑ªÂä†ËæìÂÖ•',
        addOutput: 'Ê∑ªÂä†ËæìÂá∫',
        saveConfig: '‰øùÂ≠ò',
        validateConfig: 'È™åËØÅ',
        nameRequired: 'ËäÇÁÇπÂêçÁß∞‰∏çËÉΩ‰∏∫Á©∫',
        serviceRequired: 'ËØ∑ÈÄâÊã©ÊúçÂä°Á±ªÂûã',
        promptRequired: 'ËØ∑ÈÖçÁΩÆËäÇÁÇπÊèêÁ§∫ËØç',
        conditionRequired: 'ËØ∑ÈÖçÁΩÆÊù°‰ª∂Ë°®ËææÂºè',
        configSaved: 'ËäÇÁÇπÈÖçÁΩÆÂ∑≤‰øùÂ≠ò',
        configValid: 'ËäÇÁÇπÈÖçÁΩÆÈ™åËØÅÈÄöËøáÔºÅ',
        noNodeSelected: 'ËØ∑ÂÖàÈÄâÊã©‰∏Ä‰∏™ËäÇÁÇπ',
        workflowSaved: 'Â∑•‰ΩúÊµÅÂ∑≤‰øùÂ≠ò',
        saveFailed: '‰øùÂ≠òÂ∑•‰ΩúÊµÅÂ§±Ë¥•',
        testStarted: 'Â∑•‰ΩúÊµÅÊµãËØïÂ∑≤ÂêØÂä®',
        testFailed: 'ÊµãËØïÂ∑•‰ΩúÊµÅÂ§±Ë¥•',
        deploySuccess: 'Â∑•‰ΩúÊµÅÈÉ®ÁΩ≤ÊàêÂäüÂπ∂Â∑≤‰øùÂ≠òÂà∞ËÆ∞ÂΩï‰∏≠',
        deployFailed: 'ÈÉ®ÁΩ≤Â∑•‰ΩúÊµÅÂ§±Ë¥•',

        // ÈªòËÆ§ÊèêÁ§∫ËØç
        defaultPrompts: {
          condition: 'Ê†πÊçÆËæìÂÖ•ÂÜÖÂÆπËøõË°åÊù°‰ª∂Âà§Êñ≠ÔºåËøîÂõûtrueÊàñfalse„ÄÇ',
          llm: 'ËØ∑Ê†πÊçÆËæìÂÖ•ÂÜÖÂÆπÊèê‰æõÊúâÁî®ÁöÑÂõûÁ≠îÔºå‰øùÊåÅÂõûÁ≠îÂáÜÁ°Æ„ÄÅÁÆÄÊ¥Å„ÄÅÊúâÂ∏ÆÂä©„ÄÇ',
          stt: 'ËØ∑Â∞ÜÈü≥È¢ëÂáÜÁ°ÆËΩ¨Êç¢‰∏∫ÊñáÂ≠óÔºå‰øùÊåÅËá™ÁÑ∂ÁöÑÂè•Â≠êÁªìÊûÑÂíåÊ≠£Á°ÆÁöÑÊ†áÁÇπÁ¨¶Âè∑„ÄÇ',
          tts: 'ËØ∑‰ª•Ëá™ÁÑ∂„ÄÅÊ∏ÖÊô∞ÁöÑËØ≠Ë∞ÉÊúóËØªÊñáÂ≠óÔºåÊ≥®ÊÑèËØ≠ÈÄüÈÄÇ‰∏≠ÔºåËØ≠Èü≥Ëá™ÁÑ∂„ÄÇ',
          pic2text: 'ËØ∑ËØÜÂà´ÂõæÁâá‰∏≠ÁöÑÊâÄÊúâÊñáÂ≠óÂÜÖÂÆπÔºå‰øùÊåÅÂéüÊúâÁöÑÊéíÁâàÁªìÊûÑÔºåÂáÜÁ°ÆÊèêÂèñÊñáÂ≠ó‰ø°ÊÅØ„ÄÇ',
          text2pic: 'Ê†πÊçÆÊèèËø∞ÁîüÊàêÈ´òË¥®ÈáèÂõæÁâáÔºåÁîªÈù¢ÊûÑÂõæÂêàÁêÜÔºåËâ≤ÂΩ©ÂíåË∞êÔºåÁªÜËäÇ‰∏∞ÂØå„ÄÇ',
          process: 'ÂØπËæìÂÖ•Êï∞ÊçÆËøõË°åÂ§ÑÁêÜÂíåÂàÜÊûêÔºåÊèêÂèñÊúâÁî®‰ø°ÊÅØÂπ∂Êï¥ÁêÜËæìÂá∫„ÄÇ',
          transform: 'Â∞ÜËæìÂÖ•Êï∞ÊçÆËΩ¨Êç¢‰∏∫ÊåáÂÆöÊ†ºÂºèÔºå‰øùÊåÅÊï∞ÊçÆÁöÑÂÆåÊï¥ÊÄßÂíåÂáÜÁ°ÆÊÄß„ÄÇ'
        },

        nodeConfigIncomplete: 'ËäÇÁÇπÈÖçÁΩÆ‰∏çÂÆåÊï¥',
        nodes: 'ËäÇÁÇπ',
        connections: 'ËøûÊé•',
        status: 'Áä∂ÊÄÅ',
        clearCanvas: 'Ê∏ÖÁ©∫ÁîªÂ∏É',
        saveWorkflow: '‰øùÂ≠òÂ∑•‰ΩúÊµÅ',
        testWorkflow: 'ÊµãËØïËøêË°å',
        deployWorkflow: 'ÈÉ®ÁΩ≤',
        redeployWorkflow: 'ÈáçÊñ∞ÈÉ®ÁΩ≤',
        zoomIn: 'ÊîæÂ§ß',
        zoomOut: 'Áº©Â∞è',
        resetZoom: 'ÈáçÁΩÆÁº©Êîæ',
        fitToScreen: 'ÈÄÇÂêàÂ±èÂπï',
        // ËäÇÁÇπÂêçÁß∞
        conditionNode: 'Êù°‰ª∂',
        llmNode: 'Â§ßËØ≠Ë®ÄÊ®°Âûã',
        sttNode: 'ËØ≠Èü≥ËΩ¨ÊñáÂ≠ó',
        ttsNode: 'ÊñáÂ≠óËΩ¨ËØ≠Èü≥',
        pic2textNode: 'ÂõæÁâáËΩ¨ÊñáÂ≠ó',
        text2picNode: 'ÊñáÂ≠óËΩ¨ÂõæÁâá',
        processNode: 'Â§ÑÁêÜ',
        transformNode: 'ËΩ¨Êç¢',
        // ËøûÊé•ÁÇπ
        inputPort: 'ÂÖ•',
        outputPort: 'Âá∫',
        // Ê®°ÂûãÈÄâÈ°π
        models: {
          gpt4: 'GPT-4',
          gpt35turbo: 'GPT-3.5 Turbo',
          claude3: 'Claude-3',
          llama2: 'Llama-2',
          whisper1: 'Whisper-1',
          tts1: 'TTS-1',
          tts1hd: 'TTS-1-HD',
          dalle3: 'DALL-E 3',
          dalle2: 'DALL-E 2'
        },
        // ËØ≠Èü≥ÈÄâÈ°π
        voices: {
          alloy: 'Alloy',
          echo: 'Echo',
          fable: 'Fable',
          onyx: 'Onyx',
          nova: 'Nova',
          shimmer: 'Shimmer'
        },
        // ËØ≠Ë®ÄÈÄâÈ°π
        languages: {
          chinese: '‰∏≠Êñá',
          english: 'Ëã±Êñá',
          japanese: 'Êó•Êñá',
          korean: 'Èü©Êñá'
        },
        // Ê†ºÂºèÈÄâÈ°π
        formats: {
          mp3: 'MP3',
          opus: 'Opus',
          aac: 'AAC',
          flac: 'FLAC',
          wav: 'WAV',
          pcm: 'PCM',
          json: 'JSON',
          text: 'ÊñáÊú¨',
          srt: 'SRT',
          verboseJson: 'ËØ¶ÁªÜJSON',
          vtt: 'VTT',
          plainText: 'Á∫ØÊñáÊú¨',
          markdown: 'Markdown',
          url: 'URLÈìæÊé•',
          base64: 'Base64ÁºñÁ†Å'
        },
        // ÈÖçÁΩÆÊ†áÁ≠æ
        labels: {
          maxTokens: 'ÊúÄÂ§ßTokenÊï∞',
          topP: 'Top P',
          ttsModel: 'TTSÊ®°Âûã',
          audioFormat: 'Èü≥È¢ëÊ†ºÂºè',
          speechSpeed: 'ËØ≠ÈÄü',
          sttModel: 'STTÊ®°Âûã',
          responseFormat: 'ÂìçÂ∫îÊ†ºÂºè',
          recognitionLanguage: 'ËØÜÂà´ËØ≠Ë®Ä',
          outputFormat: 'ËæìÂá∫Ê†ºÂºè',
          detailLevel: 'ËØ¶ÁªÜÁ®ãÂ∫¶',
          imageModel: 'ÂõæÁâáÊ®°Âûã',
          imageCount: 'ÂõæÁâáÊï∞Èáè',
          userIdentifier: 'Áî®Êà∑Ê†áËØÜ',
          conditionExpression: 'Êù°‰ª∂Ë°®ËææÂºè',
          retryCount: 'ÈáçËØïÊ¨°Êï∞',
          retryInterval: 'ÈáçËØïÈó¥Èöî(ms)',
          timeoutSeconds: 'Ë∂ÖÊó∂Êó∂Èó¥(s)',
          errorHandling: 'ÈîôËØØÂ§ÑÁêÜ',
          fallbackValue: 'Â§áÁî®ÂÄº',
          portName: 'Á´ØÂè£ÂêçÁß∞',
          dataType: 'Êï∞ÊçÆÁ±ªÂûã'
        },
        // Â∏ÆÂä©ÊñáÊú¨
        helpTexts: {
          stopSequences: 'LLMÈÅáÂà∞Ëøô‰∫õÂ∫èÂàóÊó∂Â∞ÜÂÅúÊ≠¢ÁîüÊàêÔºåÊØèË°å‰∏Ä‰∏™Â∫èÂàó',
          userIdForMonitoring: 'Áî®‰∫éÁõëÊéßÂíåÈò≤Êª•Áî®ÔºåÂª∫ËÆÆ‰ΩøÁî®UUID',
          logitBias: 'Ë∞ÉÊï¥ÁâπÂÆö‰ª§ÁâåÁöÑÂá∫Áé∞Ê¶ÇÁéáÔºåÊ†ºÂºè‰∏∫JSONÂØπË±°',
          audioFormatHelp: 'ÈÄâÊã©Èü≥È¢ëËæìÂá∫Ê†ºÂºèÔºåÂΩ±ÂìçÊñá‰ª∂Â§ßÂ∞èÂíåË¥®Èáè',
          maxTokensHelp: 'ÈôêÂà∂ËæìÂá∫ÊñáÊú¨ÁöÑÊúÄÂ§ßÈïøÂ∫¶',
          conditionHelp: 'ÊîØÊåÅJavaScriptË°®ËææÂºèÔºåÂèØ‰ΩøÁî®ÂèòÈáèÂêçÂºïÁî®ËæìÂÖ•Êï∞ÊçÆ',
          retryHelp: 'ËäÇÁÇπÊâßË°åÂ§±Ë¥•Êó∂ÁöÑÈáçËØïÊ¨°Êï∞',
          retryIntervalHelp: 'ÊØèÊ¨°ÈáçËØï‰πãÈó¥ÁöÑÁ≠âÂæÖÊó∂Èó¥',
          timeoutHelp: 'ËäÇÁÇπÊâßË°åÁöÑÊúÄÂ§ßÁ≠âÂæÖÊó∂Èó¥',
          errorHandlingHelp: 'ÈÄâÊã©ÈîôËØØÂèëÁîüÊó∂ÁöÑÂ§ÑÁêÜÊñπÂºè',
          fallbackHelp: 'ÂΩìËäÇÁÇπÊâßË°åÂ§±Ë¥•Êó∂‰ΩøÁî®ÁöÑÂ§áÁî®ÂÄº',
          imageCountHelp: '‰∏ÄÊ¨°ÁîüÊàêÁöÑÂõæÁâáÊï∞ÈáèÔºåDALL-E 3ÊúÄÂ§öÊîØÊåÅ1Âº†',
          userIdImageHelp: 'Áî®‰∫éÁõëÊéßÂíåÈò≤Êª•Áî®ÔºåÂª∫ËÆÆ‰ΩøÁî®UUID'
        },
        // Â∞∫ÂØ∏ÈÄâÈ°π
        imageSizes: {
          size256: '256x256',
          size512: '512x512',
          size1024: '1024x1024',
          size1792x1024: '1792x1024 (Ê®™Âêë)',
          size1024x1792: '1024x1792 (Á∫µÂêë)'
        },
        // Êï∞ÊçÆÁ±ªÂûã
        dataTypes: {
          text: 'ÊñáÊú¨',
          image: 'ÂõæÁâá',
          audio: 'Èü≥È¢ë',
          file: 'Êñá‰ª∂',
          json: 'JSON'
        },
        // ÈîôËØØÂ§ÑÁêÜÈÄâÈ°π
        errorHandlingOptions: {
          stop: 'ÂÅúÊ≠¢Â∑•‰ΩúÊµÅ',
          continue: 'ÁªßÁª≠ÊâßË°å',
          retry: 'ÈáçËØïÊâßË°å',
          fallback: '‰ΩøÁî®Â§áÁî®ÂÄº'
        },
        // ËØ¶ÁªÜÁ®ãÂ∫¶ÈÄâÈ°π
        detailLevels: {
          low: '‰Ωé - Âø´ÈÄüÂ§ÑÁêÜ',
          high: 'È´ò - ËØ¶ÁªÜÂàÜÊûê',
          auto: 'Ëá™Âä® - Êô∫ËÉΩÈÄâÊã©'
        },
        // ÁéØÂ¢ÉÈÄâÈ°π
        environments: {
          development: 'ÂºÄÂèëÁéØÂ¢É',
          testing: 'ÊµãËØïÁéØÂ¢É',
          production: 'Áîü‰∫ßÁéØÂ¢É'
        },
        // È°µÈù¢Ê†áÈ¢òÂíåÊèèËø∞
        workflowManagement: {
          title: 'Â∑•‰ΩúÊµÅÁÆ°ÁêÜ',
          description: 'Êü•ÁúãÂíåÁÆ°ÁêÜÊÇ®ÁöÑÊâÄÊúâDAGÂ∑•‰ΩúÊµÅ',
          runningLabel: 'ËøêË°å‰∏≠',
          totalWorkflows: 'ÊÄªÂ∑•‰ΩúÊµÅ',
          runningWorkflows: 'ËøêË°å‰∏≠',
          completedWorkflows: 'Â∑≤ÂÆåÊàê',
          failedWorkflows: 'Â§±Ë¥•',
          searchPlaceholder: 'ÊêúÁ¥¢Â∑•‰ΩúÊµÅ...',
          refresh: 'Âà∑Êñ∞',
          noWorkflows: 'ÊöÇÊó†Â∑•‰ΩúÊµÅ',
          noWorkflowsDescription: 'ÊÇ®ËøòÊ≤°ÊúâÂàõÂª∫‰ªª‰ΩïÂ∑•‰ΩúÊµÅÔºåÁé∞Âú®Â∞±ÂºÄÂßãËÆæËÆ°ÊÇ®ÁöÑÁ¨¨‰∏Ä‰∏™Â∑•‰ΩúÊµÅÂêßÔºÅ',
          createWorkflow: 'ÂàõÂª∫Â∑•‰ΩúÊµÅ',
          nodeCount: 'ËäÇÁÇπÊï∞:',
          createdAt: 'ÂàõÂª∫Êó∂Èó¥:',
          viewStatus: 'Êü•ÁúãÁä∂ÊÄÅ',
          viewResults: 'Êü•ÁúãÁªìÊûú',
          clone: 'Â§çÂà∂',
          deleteWorkflow: 'Âà†Èô§',
          loading: 'Ê≠£Âú®Âä†ËΩΩÂ∑•‰ΩúÊµÅÂàóË°®...',
          loadError: 'Âä†ËΩΩÂ§±Ë¥•',
          retry: 'ÈáçËØï',
          close: 'ÂÖ≥Èó≠',
          refreshStatus: 'Âà∑Êñ∞Áä∂ÊÄÅ',
          refreshStatusFailed: 'Âà∑Êñ∞Áä∂ÊÄÅÂ§±Ë¥•'
        },
        inputData: 'ËæìÂÖ•Êï∞ÊçÆÈÖçÁΩÆ',
        inputContent: 'ËæìÂÖ•ÂÜÖÂÆπ',
        inputTextPlaceholder: 'ËæìÂÖ•ÊñáÊú¨ÂÜÖÂÆπ...',
        uploadImage: '‰∏ä‰º†ÂõæÁâá',
        uploadAudio: '‰∏ä‰º†Èü≥È¢ë',
        uploadFile: '‰∏ä‰º†Êñá‰ª∂',
        clickToUpload: 'ÁÇπÂáª‰∏ä‰º†ÂõæÁâá',
        clickToUploadAudio: 'ÁÇπÂáª‰∏ä‰º†Èü≥È¢ë',
        clickToUploadFile: 'ÁÇπÂáª‰∏ä‰º†Êñá‰ª∂',
        supportedFormats: 'ÊîØÊåÅ JPG„ÄÅPNG„ÄÅGIF„ÄÅBMP„ÄÅWEBP„ÄÅSVG Ê†ºÂºèÔºåËá™Âä®ËΩ¨Êç¢‰∏∫JPEG',
        audioFormats: 'ÊîØÊåÅ MP3„ÄÅWAV„ÄÅOGG Ê†ºÂºèÔºåËá™Âä®ËÆæÁΩÆ‰∏∫WAVÊ†ºÂºè',
        inputJson: 'JSONÊï∞ÊçÆ',
        jsonPlaceholder: 'ËæìÂÖ•JSONÊ†ºÂºèÊï∞ÊçÆ...',
        jsonHint: 'ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑJSONÊ†ºÂºèÊï∞ÊçÆ',
        configurationPanel: 'ÈÖçÁΩÆÈù¢Êùø',
        selectNodeToConfig: 'ÈÄâÊã©ËäÇÁÇπËøõË°åÈÖçÁΩÆ',
        configInstructions: 'ËØ∑ÊåâÁÖß‰ª•‰∏ãÊ≠•È™§Êìç‰ΩúÔºö',
        step1: '‰ªéÂ∑¶‰æßÊãñÊãΩËäÇÁÇπÂà∞ÁîªÂ∏É',
        step2: 'ÁÇπÂáªËäÇÁÇπËøõË°åÈÄâÊã©',
        step2Detail: 'ÁÇπÂáªËäÇÁÇπÊú¨Ë∫´Ôºå‰∏çÊòØËøûÊé•ÁÇπ',
        step3: 'Âú®Ê≠§Â§ÑÈÖçÁΩÆËäÇÁÇπÂèÇÊï∞',
        step4: 'ËÆæÁΩÆËæìÂÖ•Êï∞ÊçÆÔºàÊñáÂ≠ó„ÄÅÂõæÁâáÁ≠âÔºâ',
        step4Detail: 'Âú®‰∏ãÊñπ"ËæìÂÖ•Êï∞ÊçÆÈÖçÁΩÆ"‰∏≠ËæìÂÖ•',
        tipInputLocation: 'ËæìÂÖ•ÊñáÂ≠ó‰ΩçÁΩÆÔºöÈÄâÊã©ËäÇÁÇπÂêéÔºåÂêë‰∏ãÊªöÂä®ÊâæÂà∞"ËæìÂÖ•Êï∞ÊçÆÈÖçÁΩÆ"ÈÉ®ÂàÜ',
        tip1: 'LLMËäÇÁÇπÊé•ÂèóÊñáÊú¨ËæìÂÖ•ÔºåÂèØÈÄöËøáÂ∑•‰ΩúÊµÅËøûÊé•Â§ÑÁêÜÂÖ∂‰ªñÊ†ºÂºè',
        tip2: 'ÊãñÊãΩËäÇÁÇπËøûÊé•ÁÇπÂèØ‰ª•ÂàõÂª∫Êï∞ÊçÆÊµÅ',
        tip3: 'ÈÖçÁΩÆÂÆåÊàêÂêéÂèØ‰ª•ÊµãËØïÂíåÈÉ®ÁΩ≤Â∑•‰ΩúÊµÅ',

        // Âø´Êç∑ÈîÆ
        shortcuts: {
          keyboardGuide: 'Âø´Êç∑ÈîÆÊåáÂçó',
          editOperations: 'ÁºñËæëÊìç‰Ωú',
          workflowOperations: 'Â∑•‰ΩúÊµÅÊìç‰Ωú',
          canvasOperations: 'ÁîªÂ∏ÉÊìç‰Ωú',
          undo: 'Êí§ÈîÄ',
          redo: 'ÈáçÂÅö',
          copySelectedNode: 'Â§çÂà∂ÈÄâ‰∏≠ËäÇÁÇπ',
          pasteNode: 'Á≤òË¥¥ËäÇÁÇπ',
          deleteSelectedNode: 'Âà†Èô§ÈÄâ‰∏≠ËäÇÁÇπ',
          saveWorkflow: '‰øùÂ≠òÂ∑•‰ΩúÊµÅ',
          selectAllNodes: 'ÈÄâÊã©ÊâÄÊúâËäÇÁÇπ',
          zoomCanvas: 'Áº©ÊîæÁîªÂ∏É',
          moveCanvas: 'ÁßªÂä®ÁîªÂ∏É',
          selectNode: 'ÈÄâÊã©ËäÇÁÇπ',
          dragNode: 'ÊãñÊãΩËäÇÁÇπ',
          mouseWheel: 'Èº†Ê†áÊªöËΩÆ',
          dragBlankArea: 'ÊãñÊãΩÁ©∫ÁôΩÂå∫Âüü',
          clickNode: 'ÁÇπÂáªËäÇÁÇπ',
          dragToConnect: 'Êåâ‰ΩèÊãñÊãΩÂàõÂª∫ËøûÊé•'
        },
        // Áä∂ÊÄÅÂÄº
        statusValues: {
          ready: 'Â∞±Áª™',
          running: 'ËøêË°å‰∏≠',
          completed: 'Â∑≤ÂÆåÊàê',
          failed: 'Â§±Ë¥•',
          empty: 'Á©∫ÁôΩ',
          unnamed: 'Êú™ÂëΩÂêçÂ∑•‰ΩúÊµÅ',
          deployed: 'Â∑≤ÈÉ®ÁΩ≤',
          pending: 'ÂæÖËøêË°å'
        },
        // Â∑•ÂÖ∑Ê†èÊåâÈíÆ
        toolbar: {
          clear: 'Ê∏ÖÁ©∫',
          save: '‰øùÂ≠ò',
          saveWorkflow: '‰øùÂ≠òÂ∑•‰ΩúÊµÅ',
          testWorkflow: 'ÊµãËØïÂ∑•‰ΩúÊµÅ',
          deployWorkflow: 'ÈÉ®ÁΩ≤Â∑•‰ΩúÊµÅ',
          redeployWorkflow: 'ÈáçÊñ∞ÈÉ®ÁΩ≤',
          designer: 'ËÆæËÆ°Âô®',
          dagWorkflow: 'DAGÂ∑•‰ΩúÊµÅ'
        },
        // Áä∂ÊÄÅÁ≠õÈÄâÂô®
        statusFilters: {
          all: 'ÂÖ®ÈÉ®',
          running: 'ËøêË°å‰∏≠',
          completed: 'Â∑≤ÂÆåÊàê',
          failed: 'Â§±Ë¥•',
          pending: 'ÂæÖËøêË°å'
        },
        // ËäÇÁÇπÊèèËø∞
        nodeDescriptions: {
          workflowStart: 'Â∑•‰ΩúÊµÅÂºÄÂßã',
          workflowEnd: 'Â∑•‰ΩúÊµÅÁªìÊùü',
          conditionJudgment: 'Êù°‰ª∂Âà§Êñ≠',
          dataProcessing: 'Êï∞ÊçÆÂ§ÑÁêÜ',
          dataTransformation: 'Êï∞ÊçÆËΩ¨Êç¢'
        },
        // Á´ØÂè£ÈÖçÁΩÆ
        ports: {
          trigger: 'Ëß¶ÂèëÂô®',
          result: 'ÁªìÊûú',
          input: 'ËæìÂÖ•',
          output: 'ËæìÂá∫',
          true: 'Áúü',
          false: 'ÂÅá',
          prompt: 'ÊèêÁ§∫',
          response: 'ÂìçÂ∫î',
          audio: 'Èü≥È¢ë',
          text: 'ÊñáÊú¨',
          image: 'ÂõæÁâá'
        },
        // È¢ùÂ§ñÁöÑÁøªËØëÈ°π
        inputPortsLabel: 'üîΩ ËæìÂÖ•:',
        outputPortsLabel: 'üîº ËæìÂá∫:',
        generalConfig: 'ÈÄöÁî®ÈÖçÁΩÆ',
        retryCount: 'ÈáçËØïÊ¨°Êï∞',
        retryCountPlaceholder: '3',
        retryCountHelp: 'ËäÇÁÇπÊâßË°åÂ§±Ë¥•Êó∂ÁöÑÈáçËØïÊ¨°Êï∞',
        retryInterval: 'ÈáçËØïÈó¥Èöî(ms)',
        retryIntervalPlaceholder: '1000',
        retryIntervalHelp: 'ÊØèÊ¨°ÈáçËØï‰πãÈó¥ÁöÑÁ≠âÂæÖÊó∂Èó¥',
        executionTimeout: 'Ë∂ÖÊó∂Êó∂Èó¥(s)',
        executionTimeoutPlaceholder: '30',
        executionTimeoutHelp: 'ËäÇÁÇπÊâßË°åÁöÑÊúÄÂ§ßÁ≠âÂæÖÊó∂Èó¥',
        errorHandling: 'ÈîôËØØÂ§ÑÁêÜ',
        errorHandlingHelp: 'ÈÄâÊã©ÈîôËØØÂèëÁîüÊó∂ÁöÑÂ§ÑÁêÜÊñπÂºè',
        fallbackValue: 'Â§áÁî®ÂÄº',
        fallbackValuePlaceholder: 'ÈîôËØØÊó∂‰ΩøÁî®ÁöÑÈªòËÆ§ÂÄº',
        fallbackValueHelp: 'ÂΩìËäÇÁÇπÊâßË°åÂ§±Ë¥•Êó∂‰ΩøÁî®ÁöÑÂ§áÁî®ÂÄº',
        portNamePlaceholder: 'Á´ØÂè£ÂêçÁß∞',
        portTypes: {
          text: 'ÊñáÊú¨',
          image: 'ÂõæÁâá',
          audio: 'Èü≥È¢ë',
          file: 'Êñá‰ª∂',
          json: 'JSON'
        },
        unknown: 'Êú™Áü•',
        jsExpressionHelp: 'ÊîØÊåÅJavaScriptË°®ËææÂºèÔºåÂèØ‰ΩøÁî®ÂèòÈáèÂêçÂºïÁî®ËæìÂÖ•Êï∞ÊçÆ',
        fromNode: 'Ê∫êËäÇÁÇπ',
        toNode: 'ÁõÆÊ†áËäÇÁÇπ',
        connectionConfiguration: 'ËøûÊé•ÈÖçÁΩÆ',
        connectionPrompt: 'ËøûÊé•ÊèêÁ§∫ËØç',
        connectionPromptPlaceholder: 'ËæìÂÖ•ËøûÊé•ÊèêÁ§∫ËØçÔºåÁî®‰∫éÂú®Êï∞ÊçÆ‰º†ÈÄíÊó∂ËøõË°åËΩ¨Êç¢ÊàñÂ§ÑÁêÜ...',
        connectionPromptTips: 'ËøûÊé•ÊèêÁ§∫ËØçÁî®‰∫éÂÆö‰πâÊï∞ÊçÆÂú®ËäÇÁÇπÈó¥‰º†ÈÄíÊó∂ÁöÑËΩ¨Êç¢ÈÄªËæëÔºåÂèØ‰ª•ÂåÖÂê´ÂèòÈáèÂ¶Ç {input_data}',
        connectionDescription: 'ËøûÊé•ÊèèËø∞',
        connectionDescPlaceholder: 'ÊèèËø∞Ê≠§ËøûÊé•ÁöÑ‰ΩúÁî®...',
        saveConnection: '‰øùÂ≠òËøûÊé•',
        deleteConnection: 'Âà†Èô§ËøûÊé•',
        // ÈîôËØØÊ∂àÊÅØ
        errors: {
          dataTypeIncompatible: 'Êï∞ÊçÆÁ±ªÂûã‰∏çÂÖºÂÆπÔºö{outputNode} ËæìÂá∫ {outputType} Á±ªÂûãÔºå‰ΩÜ {inputNode} Âè™Êé•Âèó {inputType} Á±ªÂûãËæìÂÖ•'
        }
      }
    },
    // Á§æÂå∫
    community: {
      title: 'ÂàõÊÑèÁ§æÂå∫',
      subtitle: '‰∏é‰∏ñÁïåÂàÜ‰∫´ÊÇ®ÁöÑÂàõÊÑè',
      heroTitle: 'ÂàõÊÑèÁ¨îËÆ∞Á§æÂå∫',
      heroSubtitle: 'ÂàÜ‰∫´‰Ω†ÁöÑÂàõÊÑèÊÉ≥Ê≥ïÔºåÂèëÁé∞Êõ¥Â§öÁÅµÊÑü',
      totalNotes: 'ÊÄªÁ¨îËÆ∞Êï∞',
      todayNotes: '‰ªäÊó•Êñ∞Â¢û',
      activeTags: 'Ê¥ªË∑ÉÊ†áÁ≠æ',
      searchPlaceholder: 'ÊêúÁ¥¢Á¨îËÆ∞ÂÜÖÂÆπ„ÄÅÊ†áÁ≠æÊàñ‰ΩúËÄÖ...',
      trendingTags: 'ÁÉ≠Èó®Ê†áÁ≠æ',
      shareNote: 'ÂàÜ‰∫´‰Ω†ÁöÑÂàõÊÑèÁ¨îËÆ∞...',
      noNotes: 'ÊöÇÊó†Á¨îËÆ∞',
      noNotesDesc: 'Âø´Êù•ÂèëÂ∏ÉÁ¨¨‰∏ÄÁØáÁ¨îËÆ∞ÂêßÔºÅ',
      loading: 'Âä†ËΩΩ‰∏≠...',
      publish: 'ÂèëÂ∏ÉÁ¨îËÆ∞',
      selectWorkflow: 'ÈÄâÊã©AI AgentÂ∑•‰ΩúÊµÅ',
      addComment: 'Ê∑ªÂä†ËØÑËÆ∫...',
      send: 'ÂèëÈÄÅ',
      tryWorkflow: 'ËØïÁî®',
      loadMore: 'Âä†ËΩΩÊõ¥Â§ö',
      // Labubu‰ªãÁªç
      labubu: {
        welcomeTitle: 'Ê¨¢ËøéÊù•Âà∞LabubuÁöÑÂàõÊÑè‰∏ñÁïåÔºÅ',
        welcomeText: 'Âú®ËøôÈáåÔºåÊØè‰∏Ä‰∏™ÂàõÊÑèÈÉΩÂÉèLabubu‰∏ÄÊ†∑ÂÖÖÊª°È≠ÖÂäõÂíåÊÉäÂñú„ÄÇËÆ©Êàë‰ª¨‰∏ÄËµ∑Êé¢Á¥¢AIÁöÑÊó†ÈôêÂèØËÉΩÔºåÁî®Ê∏©ÊöñÁöÑÂàõÊÑèÁÇπ‰∫ÆÊï∞Â≠ó‰∏ñÁïåÁöÑÊØè‰∏Ä‰∏™ËßíËêΩ„ÄÇ',
        features: {
          creativity: 'ÂàõÊÑèÊó†Èôê',
          sharing: 'ÁÅµÊÑüÂÖ±‰∫´',
          ai: 'AIÈ©±Âä®',
          community: 'Ê∏©ÊöñÁ§æÂå∫'
        }
      },
      // Êó∂Èó¥ÊòæÁ§∫
      timeAgo: {
        minutesAgo: '{count}ÂàÜÈíüÂâç',
        minuteAgo: '1ÂàÜÈíüÂâç',
        hoursAgo: '{count}Â∞èÊó∂Ââç',
        hourAgo: '1Â∞èÊó∂Ââç',
        daysAgo: '{count}Â§©Ââç',
        dayAgo: '1Â§©Ââç',
        weeksAgo: '{count}Âë®Ââç',
        weekAgo: '1Âë®Ââç',
        monthsAgo: '{count}‰∏™ÊúàÂâç',
        monthAgo: '1‰∏™ÊúàÂâç',
        yearsAgo: '{count}Âπ¥Ââç',
        yearAgo: '1Âπ¥Ââç',
        justNow: 'ÂàöÂàö'
      },
      filters: {
        all: 'ÂÖ®ÈÉ®',
        text: 'ÊñáÂ≠ó',
        image: 'ÂõæÁâá',
        video: 'ËßÜÈ¢ë',
        workflow: 'Â∑•‰ΩúÊµÅ'
      },
      noteTypes: {
        text: 'ÊñáÂ≠óÁ¨îËÆ∞',
        image: 'ÂõæÁâáÂàÜ‰∫´',
        video: 'ËßÜÈ¢ëÂàÜ‰∫´',
        workflow: 'AIÂ∑•‰ΩúÊµÅ'
      },
      tags: {
        aiCreation: 'AIÂàõ‰Ωú',
        labubu: 'Labubu',
        designInspiration: 'ËÆæËÆ°ÁÅµÊÑü',
        photographyTips: 'ÊëÑÂΩ±ÊäÄÂ∑ß',
        programmingNotes: 'ÁºñÁ®ãÁ¨îËÆ∞',
        lifeRecords: 'ÁîüÊ¥ªËÆ∞ÂΩï',
        learningInsights: 'Â≠¶‰π†ÂøÉÂæó',
        workflows: 'Â∑•‰ΩúÊµÅÁ®ã',
        creativeIdeas: 'ÂàõÊÑèÊÉ≥Ê≥ï',
        techSharing: 'ÊäÄÊúØÂàÜ‰∫´'
      },
      placeholders: {
        text: 'ÂàÜ‰∫´‰Ω†ÁöÑÊÉ≥Ê≥ï„ÄÅÁªèÈ™åÊàñÁÅµÊÑü...',
        image: '‰∏∫‰Ω†ÁöÑÂõæÁâáÊ∑ªÂä†ÊèèËø∞...',
        video: '‰∏∫‰Ω†ÁöÑËßÜÈ¢ëÊ∑ªÂä†ËØ¥Êòé...',
        workflow: '‰ªãÁªç‰Ω†ÁöÑAIÂ∑•‰ΩúÊµÅÂäüËÉΩÂíåÁî®ÈÄî...'
      },
      uploadTexts: {
        image: 'ÁÇπÂáªÊàñÊãñÊãΩ‰∏ä‰º†ÂõæÁâá',
        video: 'ÁÇπÂáªÊàñÊãñÊãΩ‰∏ä‰º†ËßÜÈ¢ë'
      },
      tabs: {
        feed: 'Âä®ÊÄÅ',
        gallery: '‰ΩúÂìÅÈõÜ',
        events: 'Ê¥ªÂä®',
        groups: 'Áæ§ÁªÑ'
      },
      actions: {
        createPost: 'ÂèëÂ∏ÉÂä®ÊÄÅ',
        like: 'ÁÇπËµû',
        comment: 'ËØÑËÆ∫',
        share: 'ÂàÜ‰∫´',
        follow: 'ÂÖ≥Ê≥®',
        joinGroup: 'Âä†ÂÖ•Áæ§ÁªÑ',
        leaveGroup: 'ÈÄÄÂá∫Áæ§ÁªÑ'
      },
      features: {
        connect: 'Âàõ‰ΩúËÄÖÁΩëÁªú',
        challenges: 'ÂàõÊÑèÊåëÊàòËµõ',
        showcase: '‰ΩúÂìÅÂ±ïÁ§∫'
      }
    },
    // Â∏ÇÂú∫
    marketplace: {
      title: 'ÂàõÊÑèÂ∏ÇÂú∫',
      subtitle: 'ÂèëÁé∞Âíå‰∫§ÊòìÊï∞Â≠óÂàõ‰Ωú',
      categories: {
        artworks: 'Ëâ∫ÊúØ‰ΩúÂìÅ',
        music: 'Èü≥‰πê',
        videos: 'ËßÜÈ¢ë',
        tools: 'Â∑•ÂÖ∑'
      },
      actions: {
        buy: 'Ë¥≠‰π∞',
        sell: 'Âá∫ÂîÆ',
        addToCart: 'Âä†ÂÖ•Ë¥≠Áâ©ËΩ¶',
        checkout: 'ÁªìÁÆó'
      },
      features: {
        assets: 'Êï∞Â≠óËµÑ‰∫ß',
        secure: 'ÂÆâÂÖ®‰∫§Êòì',
        monetize: '‰ΩúÂìÅÂèòÁé∞'
      }
    },
    // ÂÖ≥‰∫é
    about: {
      title: 'ÂÖ≥‰∫éLabubu AIÂπ≥Âè∞',
      subtitle: '‰∫ÜËß£Êàë‰ª¨ÁöÑÂπ≥Âè∞Âíå‰ΩøÂëΩ',
      sections: {
        mission: 'Êàë‰ª¨ÁöÑ‰ΩøÂëΩ',
        features: 'Ê†∏ÂøÉÂäüËÉΩ',
        technology: 'ÊäÄÊúØÊ†à',
        team: 'Êàë‰ª¨ÁöÑÂõ¢Èòü'
      },
      features: {
        innovation: 'AIÂàõÊñ∞ÊäÄÊúØ',
        collaboration: 'Á§æÂå∫Âçè‰Ωú',
        growth: 'Âàõ‰ΩúËÄÖÊàêÈïø'
      }
    },
    // ÁôªÂΩï
    login: {
      title: 'LABUBU AI',
      username: 'Áî®Êà∑Âêç',
      password: 'ÂØÜÁ†Å',
      usernamePlaceholder: 'ËØ∑ËæìÂÖ•Áî®Êà∑Âêç',
      passwordPlaceholder: 'ËØ∑ËæìÂÖ•ÂØÜÁ†Å',
      rememberMe: 'ËÆ∞‰ΩèÊàë',
      forgotPassword: 'ÂøòËÆ∞ÂØÜÁ†ÅÔºü',
      loginButton: 'ÁôªÂΩï',
      loggingIn: 'ÁôªÂΩï‰∏≠',
      loadingTip: 'ÁôªÂΩïÈ™åËØÅÂèØËÉΩÈúÄË¶Å‰∏Ä‰∫õÊó∂Èó¥ÔºåËØ∑ËÄêÂøÉÁ≠âÂæÖ...',
      noAccount: 'ËøòÊ≤°ÊúâË¥¶Âè∑Ôºü',
      registerNow: 'Ê≥®ÂÜåÊñ∞Ë¥¶Âè∑',
      passwordError: 'ÂØÜÁ†ÅÈúÄËá≥Â∞ë8‰ΩçÔºå‰∏îÂåÖÂê´Ëã±ÊñáÂíåÁâπÊÆäÂ≠óÁ¨¶',
      forgotMessage: 'ËØ∑ËÅîÁ≥ªÁÆ°ÁêÜÂëòÈáçÁΩÆÂØÜÁ†Å„ÄÇ',
      registerMessage: 'Ê≥®ÂÜåÂäüËÉΩÊöÇÊú™ÂºÄÊîæ„ÄÇ',
      loginFailed: 'ÁôªÂΩïÂ§±Ë¥•',
      loginSuccess: 'ÁôªÂΩïÊàêÂäü',
      usernameRequired: 'ËØ∑ËæìÂÖ•Áî®Êà∑Âêç',
      passwordRequired: 'ËØ∑ËæìÂÖ•ÂØÜÁ†Å'
    },
    // Ê≥®ÂÜå
    register: {
      title: 'Ê≥®ÂÜåÊñ∞Ë¥¶Âè∑',
      username: 'Áî®Êà∑Âêç',
      email: 'ÈÇÆÁÆ±',
      password: 'ÂØÜÁ†Å',
      confirmPassword: 'Á°ÆËÆ§ÂØÜÁ†Å',
      verificationCode: 'È™åËØÅÁ†Å',
      usernamePlaceholder: 'ËØ∑ËæìÂÖ•Áî®Êà∑Âêç',
      emailPlaceholder: 'ËØ∑ËæìÂÖ•ÈÇÆÁÆ±',
      passwordPlaceholder: 'ËØ∑ËæìÂÖ•ÂØÜÁ†Å',
      passwordHint: 'ÂØÜÁ†ÅË¶ÅÊ±ÇÔºö8-16‰ΩçÔºåËá≥Â∞ëÂåÖÂê´Â§ßÂÜôÂ≠óÊØç„ÄÅÂ∞èÂÜôÂ≠óÊØç„ÄÅÊï∞Â≠ó‰∏≠ÁöÑ‰∏§Áßç',
      confirmPasswordPlaceholder: 'ËØ∑ÂÜçÊ¨°ËæìÂÖ•ÂØÜÁ†Å',
      codePlaceholder: 'ËØ∑ËæìÂÖ•È™åËØÅÁ†Å',
      getCode: 'Ëé∑ÂèñÈ™åËØÅÁ†Å',
      registerButton: 'Ê≥®ÂÜå',
      registering: 'Ê≥®ÂÜå‰∏≠',
      registeringTip: 'Ë¥¶Êà∑Ê≥®ÂÜåÈ™åËØÅÂèØËÉΩÈúÄË¶Å‰∏Ä‰∫õÊó∂Èó¥ÔºåËØ∑ËÄêÂøÉÁ≠âÂæÖ...',
      hasAccount: 'Â∑≤ÊúâË¥¶Âè∑Ôºü',
      goLogin: 'ÂéªÁôªÂΩï',
      completeInfo: 'ËØ∑Â°´ÂÜôÂÆåÊï¥‰ø°ÊÅØ',
      usernameError: 'Áî®Êà∑ÂêçÈúÄ‰∏∫4-20‰ΩçÂ≠óÊØç„ÄÅÊï∞Â≠óÊàñ‰∏ãÂàíÁ∫ø',
      emailError: 'ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑÈÇÆÁÆ±Âú∞ÂùÄ',
      passwordError: 'ÂØÜÁ†ÅÈúÄËá≥Â∞ë8‰ΩçÔºå‰∏îÂåÖÂê´Ëã±ÊñáÂíåÁâπÊÆäÂ≠óÁ¨¶',
      confirmError: '‰∏§Ê¨°ËæìÂÖ•ÁöÑÂØÜÁ†Å‰∏ç‰∏ÄËá¥',
      codeError: 'ËØ∑ËæìÂÖ•È™åËØÅÁ†Å',
      registerSuccess: 'Ê≥®ÂÜåÊàêÂäüÔºÅ',
      getCode: 'Ëé∑ÂèñÈ™åËØÅÁ†Å',
      sending: 'ÂèëÈÄÅ‰∏≠...',
      sentCountdown: 'Â∑≤ÂèëÈÄÅ(180s)',
      sentTime: 'Â∑≤ÂèëÈÄÅ({time}s)',
      sendingCode: 'Ê≠£Âú®ÂèëÈÄÅÈ™åËØÅÁ†Å',
      loadingTip: 'ÈÇÆÁÆ±È™åËØÅÁ†ÅÂèëÈÄÅÈúÄË¶Å‰∏Ä‰∫õÊó∂Èó¥ÔºåËØ∑ËÄêÂøÉÁ≠âÂæÖ...',
      codeSuccess: 'È™åËØÅÁ†ÅÂ∑≤ÂèëÈÄÅÂà∞ÊÇ®ÁöÑÈÇÆÁÆ±ÔºåËØ∑Êü•Êî∂ÔºÅ',
      emailFormatError: 'ÈÇÆÁÆ±Ê†ºÂºè‰∏çÊ≠£Á°Æ',
      usernameRequired: 'ËØ∑ËæìÂÖ•Áî®Êà∑Âêç',
      usernameLength: 'Áî®Êà∑ÂêçÈïøÂ∫¶ÂøÖÈ°ªÂ§ß‰∫é2‰∏™Â≠óÁ¨¶',
      passwordLength: 'ÂØÜÁ†ÅÈïøÂ∫¶ÂøÖÈ°ª‰∏∫8-16‰Ωç',
      passwordComplexity: 'ÂØÜÁ†ÅÂøÖÈ°ªÂåÖÂê´Â§ßÂÜôÂ≠óÊØç„ÄÅÂ∞èÂÜôÂ≠óÊØç„ÄÅÊï∞Â≠ó‰∏≠Ëá≥Â∞ë‰∏§Á±ª',
      passwordMismatch: '‰∏§Ê¨°ËæìÂÖ•ÁöÑÂØÜÁ†Å‰∏ç‰∏ÄËá¥',
      invalidCode: 'È™åËØÅÁ†ÅÈîôËØØÊàñÂ∑≤ËøáÊúü',
      serverError: 'ÊúçÂä°Âô®ÈîôËØØÔºåËØ∑Á®çÂêéÈáçËØï',
      sendCodeError: 'È™åËØÅÁ†ÅÂèëÈÄÅÂ§±Ë¥•',
      sendCodeFailed: 'È™åËØÅÁ†ÅÂèëÈÄÅÂ§±Ë¥•',
      registerFailed: 'Ê≥®ÂÜåÂ§±Ë¥•'
    },
    // ‰∏™‰∫∫‰∏≠ÂøÉ
    profile: {
      aiAgents: 'AIÊô∫ËÉΩ‰Ωì',
      posts: 'Â∏ñÂ≠ê',
      transactions: '‰∫§Êòì',
      editProfile: 'ÁºñËæëËµÑÊñô',
      share: 'ÂàÜ‰∫´',
      myAIAgents: 'ÊàëÁöÑAIÊô∫ËÉΩ‰Ωì',
      createAgent: 'ÂàõÂª∫Êñ∞Êô∫ËÉΩ‰Ωì',
      myCommunityContent: 'ÊàëÁöÑÁ§æÂå∫ÂÜÖÂÆπ',
      createPost: 'ÂàõÂª∫Â∏ñÂ≠ê',
      marketplace: 'Â∏ÇÂú∫',
      settings: 'ËÆæÁΩÆ',
      community: 'Á§æÂå∫',
      mySelling: 'ÊàëÁöÑÂïÜÂìÅ',
      purchases: 'Ë¥≠‰π∞ËÆ∞ÂΩï',
      sales: 'ÈîÄÂîÆËÆ∞ÂΩï',
      myProducts: 'ÊàëÁöÑÂïÜÂìÅ',
      addProduct: 'Ê∑ªÂä†ÂïÜÂìÅ',
      purchaseHistory: 'Ë¥≠‰π∞ÂéÜÂè≤',
      salesHistory: 'ÈîÄÂîÆÂéÜÂè≤',
      accountSettings: 'Ë¥¶Êà∑ËÆæÁΩÆ',
      privacy: 'ÈöêÁßÅËÆæÁΩÆ',
      notifications: 'ÈÄöÁü•ËÆæÁΩÆ',
      username: 'Áî®Êà∑Âêç',
      email: 'ÈÇÆÁÆ±',
      bio: '‰∏™‰∫∫ÁÆÄ‰ªã',
      bioPlaceholder: '‰ªãÁªç‰∏Ä‰∏ãËá™Â∑±...',
      publicProfile: 'ÂÖ¨ÂºÄËµÑÊñô',
      publicProfileDesc: 'ÂÖÅËÆ∏‰ªñ‰∫∫Êü•Áúã‰Ω†ÁöÑËµÑÊñô',
      showActivity: 'ÊòæÁ§∫Ê¥ªÂä®',
      showActivityDesc: 'ÊòæÁ§∫‰Ω†ÁöÑÊúÄËøëÊ¥ªÂä®',
      emailNotifications: 'ÈÇÆ‰ª∂ÈÄöÁü•',
      emailNotificationsDesc: 'ÈÄöËøáÈÇÆ‰ª∂Êé•Êî∂ÈÄöÁü•',
      marketingEmails: 'Ëê•ÈîÄÈÇÆ‰ª∂',
      marketingEmailsDesc: 'Êé•Êî∂Êé®ÂπøÂÜÖÂÆπ',
      saveChanges: '‰øùÂ≠òÊõ¥Êîπ',
      deleteAccount: 'Âà†Èô§Ë¥¶Êà∑',
      deleteAccountConfirm: 'Á°ÆÂÆöË¶ÅÂà†Èô§Ë¥¶Êà∑ÂêóÔºüÊ≠§Êìç‰ΩúÊó†Ê≥ïÊí§ÈîÄÔºÅ',
      runs: 'ËøêË°åÊ¨°Êï∞',
      success: 'ÊàêÂäüÁéá',
      edit: 'ÁºñËæë',
      run: 'ËøêË°å',
      delete: 'Âà†Èô§',
      view: 'Êü•Áúã',
      stats: 'ÁªüËÆ°',
      seller: 'ÂçñÂÆ∂',
      buyer: '‰π∞ÂÆ∂',
      viewOrder: 'Êü•ÁúãËÆ¢Âçï',
      review: 'ËØÑ‰ª∑',
      process: 'Â§ÑÁêÜ',
      selectAvatar: 'ÈÄâÊã©Â§¥ÂÉè',
      avatarTip: 'ÈÄâÊã©‰∏Ä‰∏™‰Ω†ÂñúÊ¨¢ÁöÑÂ§¥ÂÉè‰Ωú‰∏∫‰Ω†ÁöÑ‰∏™‰∫∫ÂΩ¢Ë±°',
      cancel: 'ÂèñÊ∂à',
      confirm: 'Á°ÆËÆ§',
      avatarUpdated: 'Â§¥ÂÉèÊõ¥Êñ∞ÊàêÂäüÔºÅ',
      avatarUpdateFailed: 'Â§¥ÂÉèÊõ¥Êñ∞Â§±Ë¥•ÔºåËØ∑ÈáçËØï',
      avatarEditMsg: 'Â§¥ÂÉèÁºñËæëÂäüËÉΩÂç≥Â∞ÜÊé®Âá∫',
      profileEditMsg: '‰∏™‰∫∫ËµÑÊñôÁºñËæëÂäüËÉΩÂç≥Â∞ÜÊé®Âá∫',
      linkCopied: 'ÈìæÊé•Â∑≤Â§çÂà∂Âà∞Ââ™Ë¥¥Êùø',
      settingsSaved: 'ËÆæÁΩÆÂ∑≤‰øùÂ≠ò',
      deleteAccountMsg: 'Ë¥¶Êà∑Âà†Èô§ÈúÄË¶ÅËÅîÁ≥ªÂÆ¢Êúç',
      status: {
        active: 'Ê¥ªË∑É',
        draft: 'ËçâÁ®ø',
        inactive: 'Êú™ÊøÄÊ¥ª'
      },
      postType: {
        artwork: 'Ëâ∫ÊúØ‰ΩúÂìÅ',
        tutorial: 'ÊïôÁ®ã',
        discussion: 'ËÆ®ËÆ∫',
        showcase: 'Â±ïÁ§∫'
      },
      productStatus: {
        active: 'Âú®ÂîÆ',
        sold_out: 'ÂîÆÁΩÑ',
        draft: 'ËçâÁ®ø'
      },
      transactionStatus: {
        pending: 'ÂæÖÂ§ÑÁêÜ',
        completed: 'Â∑≤ÂÆåÊàê',
        delivered: 'Â∑≤ÈÄÅËææ',
        cancelled: 'Â∑≤ÂèñÊ∂à'
      }
    }
  }
})

// ËØ≠Ë®ÄÁÆ°ÁêÜÁ±ª
class LanguageManager {
  constructor() {
    this.translations = translations
    this.init()
  }

  init() {
    // Ê£ÄÊü•Áî®Êà∑ÊòØÂê¶Â∑≤Áªè‰∏ªÂä®ÈÄâÊã©ËøáËØ≠Ë®Ä
    const userSelectedLanguage = localStorage.getItem('user_selected_language')
    const savedLanguage = localStorage.getItem('language')
    
    if (userSelectedLanguage === 'true' && savedLanguage && LANGUAGES[savedLanguage]) {
      // Â¶ÇÊûúÁî®Êà∑Â∑≤ÁªèÈÄâÊã©ËøáËØ≠Ë®ÄÔºå‰ΩøÁî®‰øùÂ≠òÁöÑËØ≠Ë®Ä
      currentLanguage.value = savedLanguage
    } else {
      // È¶ñÊ¨°ËÆøÈóÆÊàñÁî®Êà∑Êú™ÈÄâÊã©ËøáËØ≠Ë®ÄÔºåÈªòËÆ§‰ΩøÁî®Ëã±ËØ≠
      currentLanguage.value = DEFAULT_LANGUAGE
      // ‰øùÂ≠òÈªòËÆ§ËØ≠Ë®ÄÂà∞Êú¨Âú∞Â≠òÂÇ®
      localStorage.setItem('language', DEFAULT_LANGUAGE)
    }
  }

  getCurrentLanguage() {
    return currentLanguage.value
  }

  setLanguage(lang) {
    if (LANGUAGES[lang]) {
      currentLanguage.value = lang
      localStorage.setItem('language', lang)
      // Ê†áËÆ∞Áî®Êà∑Â∑≤Áªè‰∏ªÂä®ÈÄâÊã©ËøáËØ≠Ë®Ä
      localStorage.setItem('user_selected_language', 'true')
      document.documentElement.lang = lang
    }
  }

  getLanguages() {
    return LANGUAGES
  }

  t(key, defaultValue = '') {
    const keys = key.split('.')
    let value = translations[currentLanguage.value]
    
    for (const k of keys) {
      value = value?.[k]
      if (value === undefined) break
    }
    
    return value || defaultValue || key
  }

  // Ê£ÄÊü•ÊòØÂê¶‰∏∫‰∏≠Êñá
  isZh() {
    return currentLanguage.value === 'zh'
  }

  // Ê£ÄÊü•ÊòØÂê¶‰∏∫Ëã±Êñá
  isEn() {
    return currentLanguage.value === 'en'
  }
}

// ÂàõÂª∫ÂÖ®Â±ÄËØ≠Ë®ÄÁÆ°ÁêÜÂÆû‰æã
const languageManager = new LanguageManager()

// ÂØºÂá∫
export { languageManager, currentLanguage, LANGUAGES }
export default languageManager 