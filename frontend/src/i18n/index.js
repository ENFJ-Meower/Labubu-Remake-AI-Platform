import { reactive, ref } from 'vue'

// ËØ≠Ë®ÄÈÖçÁΩÆ
const LANGUAGES = {
  en: {
    name: 'English',
    code: 'en',
    flag: 'üá∫üá∏'
  },
  zh: {
    name: '‰∏≠Êñá',
    code: 'zh',
    flag: 'üá®üá≥'
  }
}

// ÈªòËÆ§ËØ≠Ë®Ä
const DEFAULT_LANGUAGE = 'en'

// ÂΩìÂâçËØ≠Ë®ÄÁä∂ÊÄÅ
const currentLanguage = ref(DEFAULT_LANGUAGE)

// ÁøªËØëËµÑÊ∫ê
const translations = reactive({
  en: {
    // ÂØºËà™
    nav: {
      home: 'Home',
      aiAgent: 'AI Agent',
      community: 'Community',
      marketplace: 'Marketplace',
      about: 'About',
      login: 'Login',
      register: 'Register'
    },
    // ÈÄöÁî®
    common: {
      back: 'Back',
      save: 'Save',
      cancel: 'Cancel',
      confirm: 'Confirm',
      delete: 'Delete',
      edit: 'Edit',
      submit: 'Submit',
      loading: 'Loading...',
      error: 'Error',
      success: 'Success',
      warning: 'Warning',
      info: 'Info',
      close: 'Close',
      copy: 'Copy',
      regenerate: 'Regenerate',
      upload: 'Upload',
      download: 'Download',
      preview: 'Preview',
      send: 'Send',
      clear: 'Clear',
      search: 'Search',
      filter: 'Filter',
      sort: 'Sort',
      language: 'Language'
    },
    // È¶ñÈ°µ
    home: {
      title: 'Welcome to Labubu AI Platform',
      subtitle: 'Create, Share, and Explore AI-Generated Content',
      buildAgent: 'Build Agent',
      learnMore: 'Learn More',
      features: {
        aiAgent: 'AI Agent Studio',
        community: 'Creative Community',
        marketplace: 'Digital Marketplace'
      },
      descriptions: {
        aiAgent: 'Build and customize intelligent AI agents with our intuitive drag-and-drop workflow editor. Create personalized chatbots, automate complex tasks, and integrate multiple AI services including LLM, image generation, speech synthesis, and more. Perfect for businesses, creators, and developers.',
        community: 'Join a vibrant community of creators, artists, and AI enthusiasts. Share your creations, discover amazing works, participate in challenges, collaborate on projects, and learn from fellow creators. Connect, inspire, and be inspired in our creative ecosystem.',
        marketplace: 'Discover and trade unique digital creations, custom AI agents, templates, and creative assets. Buy professional tools, sell your innovations, commission custom work, and find everything you need to enhance your creative projects in our secure marketplace.',
        about: 'Labubu AI Platform is the ultimate creative ecosystem that combines cutting-edge AI technology with community collaboration. We empower creators to build, share, and monetize their innovations while fostering a supportive environment for learning and growth.'
      },
      contact: {
        title: 'Get in Touch',
        subtitle: 'Ready to start your creative journey? We\'re here to help!',
        support: 'Contact Support',
        discord: 'Join Discord'
      }
    },

    // AI Agent
    aiAgent: {
      title: 'AI Agent Studio',
      subtitle: 'Professional AI Agent Building Platform',
      tabs: {
        basic: 'Basic Info',
        prompt: 'Prompt Builder',
        knowledge: 'Knowledge Base',
        workflow: 'Workflow',
        multimodal: 'Multimodal',
        model: 'Model Config',
        test: 'Test & Deploy',
        workflowDesign: 'Workflow Design',
        workflowDesignDesc: 'Visual DAG workflow editor - Core feature',
        workflowManagement: 'Workflow Management',
        workflowManagementDesc: 'View and manage all DAG workflows',
        testDeploy: 'Test & Deploy',
        testDeployDesc: 'Testing and deployment'
      },
      actions: {
        saveAgent: 'Save Agent',
        testAgent: 'Test Agent',
        deployAgent: 'Deploy Agent',
        createNew: 'Create New Agent'
      },
      features: {
        workflow: 'Visual Workflow Editor',
        multimodal: 'Multi-AI Integration',
        automation: 'Task Automation'
      },
      workflow: {
        nodeTypes: 'Node Types',
        controlNodes: 'Control Nodes',
        aiServices: 'AI Services',
        toolNodes: 'Tool Nodes',

        conditionDesc: 'Condition Logic',
        llmDesc: 'Large Language Model',
        sttDesc: 'Speech to Text',
        ttsDesc: 'Text to Speech',
        pic2textDesc: 'Image to Text',
        text2picDesc: 'Text to Image',
        processDesc: 'Data Processing',
        transformDesc: 'Data Transform',
        nodeConfiguration: 'Node Configuration',
        nodeName: 'Node Name',
        nodeNamePlaceholder: 'Enter node name',
        nodeDescription: 'Node Description',
        nodeDescPlaceholder: 'Describe node function',
        serviceType: 'Service Type',
        selectServiceType: 'Select Service Type',
        llmService: 'Large Language Model',
        sttService: 'Speech to Text',
        ttsService: 'Text to Speech',
        pic2textService: 'Image to Text',
        text2picService: 'Text to Image',
        nodePrompt: 'Node Prompt',
        llmModel: 'LLM Model',
        temperature: 'Temperature',
        conservative: 'Conservative',
        creative: 'Creative',
        voiceType: 'Voice Type',
        language: 'Language',
        imageSize: 'Image Size',
        imageStyle: 'Image Style',
        conditionExpression: 'Condition Expression',
        conditionPlaceholder: 'e.g. result.length > 0',
        inputOutput: 'Input/Output',
        inputPorts: 'Input Ports',
        outputPorts: 'Output Ports',
        addInput: 'Add Input',
        addOutput: 'Add Output',
        saveConfig: 'Save Config',
        validateConfig: 'Validate Config',
        nameRequired: 'Node name is required',
        serviceRequired: 'Please select service type',
        promptRequired: 'Please configure node prompt',
        conditionRequired: 'Please configure condition expression',
        configSaved: 'Node configuration saved',
        workflowSaved: 'Workflow saved',
        saveFailed: 'Failed to save workflow',
        testStarted: 'Workflow test started',
        testFailed: 'Failed to test workflow',
        deploySuccess: 'Workflow deployed successfully',
        deployFailed: 'Failed to deploy workflow',

        nodeConfigIncomplete: 'Node configuration incomplete',
        nodes: 'Nodes',
        connections: 'Connections',
        status: 'Status',
        clearCanvas: 'Clear Canvas',
        saveWorkflow: 'Save Workflow',
        testWorkflow: 'Test Workflow',
        deployWorkflow: 'Deploy',
        zoomIn: 'Zoom In',
        zoomOut: 'Zoom Out',
        resetZoom: 'Reset Zoom',
        fitToScreen: 'Fit to Screen',
        // ËäÇÁÇπÂêçÁß∞
        conditionNode: 'Condition',
        llmNode: 'LLM',
        sttNode: 'STT',
        ttsNode: 'TTS',
        pic2textNode: 'Pic2Text',
        text2picNode: 'Text2Pic',
        processNode: 'Process',
        transformNode: 'Transform',
        // ËøûÊé•ÁÇπ
        inputPort: 'IN',
        outputPort: 'OUT',
        // Ê®°ÂûãÈÄâÈ°π
        models: {
          gpt4: 'GPT-4',
          gpt35turbo: 'GPT-3.5 Turbo',
          claude3: 'Claude-3',
          llama2: 'Llama-2',
          whisper1: 'Whisper-1',
          tts1: 'TTS-1',
          tts1hd: 'TTS-1-HD',
          dalle3: 'DALL-E 3',
          dalle2: 'DALL-E 2'
        },
        // ËØ≠Èü≥ÈÄâÈ°π
        voices: {
          alloy: 'Alloy',
          echo: 'Echo',
          fable: 'Fable',
          onyx: 'Onyx',
          nova: 'Nova',
          shimmer: 'Shimmer'
        },
        // ËØ≠Ë®ÄÈÄâÈ°π
        languages: {
          chinese: 'Chinese',
          english: 'English',
          japanese: 'Japanese',
          korean: 'Korean'
        },
        // Ê†ºÂºèÈÄâÈ°π
        formats: {
          mp3: 'MP3',
          opus: 'Opus',
          aac: 'AAC',
          flac: 'FLAC',
          wav: 'WAV',
          pcm: 'PCM',
          json: 'JSON',
          text: 'Text',
          srt: 'SRT',
          verboseJson: 'Verbose JSON',
          vtt: 'VTT',
          plainText: 'Plain Text',
          markdown: 'Markdown',
          url: 'URL Link',
          base64: 'Base64 Encoded'
        },
        // ÈÖçÁΩÆÊ†áÁ≠æ
        labels: {
          maxTokens: 'Max Tokens',
          topP: 'Top P',
          ttsModel: 'TTS Model',
          audioFormat: 'Audio Format',
          speechSpeed: 'Speech Speed',
          sttModel: 'STT Model',
          responseFormat: 'Response Format',
          recognitionLanguage: 'Recognition Language',
          outputFormat: 'Output Format',
          detailLevel: 'Detail Level',
          imageModel: 'Image Model',
          imageCount: 'Image Count',
          userIdentifier: 'User Identifier',
          conditionExpression: 'Condition Expression',
          retryCount: 'Retry Count',
          retryInterval: 'Retry Interval (ms)',
          timeoutSeconds: 'Timeout (s)',
          errorHandling: 'Error Handling',
          fallbackValue: 'Fallback Value',
          portName: 'Port Name',
          dataType: 'Data Type'
        },
        // Â∏ÆÂä©ÊñáÊú¨
        helpTexts: {
          stopSequences: 'LLM will stop generating when encountering these sequences, one per line',
          userIdForMonitoring: 'For monitoring and abuse prevention, recommend using UUID',
          logitBias: 'Adjust probability of specific tokens, JSON object format',
          audioFormatHelp: 'Choose audio output format, affects file size and quality',
          maxTokensHelp: 'Limit maximum length of output text',
          conditionHelp: 'Supports JavaScript expressions, can reference input data using variable names',
          retryHelp: 'Number of retries when node execution fails',
          retryIntervalHelp: 'Wait time between retries',
          timeoutHelp: 'Maximum wait time for node execution',
          errorHandlingHelp: 'Choose how to handle errors',
          fallbackHelp: 'Default value to use when node execution fails',
          imageCountHelp: 'Number of images to generate at once, DALL-E 3 supports max 1',
          userIdImageHelp: 'For monitoring and abuse prevention, recommend using UUID'
        },
        // Â∞∫ÂØ∏ÈÄâÈ°π
        imageSizes: {
          size256: '256x256',
          size512: '512x512',
          size1024: '1024x1024',
          size1792x1024: '1792x1024 (Landscape)',
          size1024x1792: '1024x1792 (Portrait)'
        },
        // Êï∞ÊçÆÁ±ªÂûã
        dataTypes: {
          text: 'Text',
          image: 'Image',
          audio: 'Audio',
          file: 'File',
          json: 'JSON'
        },
        // ÈîôËØØÂ§ÑÁêÜÈÄâÈ°π
        errorHandlingOptions: {
          stop: 'Stop Workflow',
          continue: 'Continue Execution',
          retry: 'Retry Execution',
          fallback: 'Use Fallback Value'
        },
        // ËØ¶ÁªÜÁ®ãÂ∫¶ÈÄâÈ°π
        detailLevels: {
          low: 'Low - Fast Processing',
          high: 'High - Detailed Analysis',
          auto: 'Auto - Smart Selection'
        },
        // ÁéØÂ¢ÉÈÄâÈ°π
        environments: {
          development: 'Development',
          testing: 'Testing',
          production: 'Production'
        },
        // È°µÈù¢Ê†áÈ¢òÂíåÊèèËø∞
        workflowManagement: {
          title: 'Workflow Management',
          description: 'View and manage all your DAG workflows',
          runningLabel: 'Running',
          totalWorkflows: 'Total Workflows',
          runningWorkflows: 'Running',
          completedWorkflows: 'Completed',
          failedWorkflows: 'Failed',
          searchPlaceholder: 'Search workflows...',
          refresh: 'Refresh',
          noWorkflows: 'No Workflows',
          noWorkflowsDescription: 'You haven\'t created any workflows yet. Start designing your first workflow!',
          createWorkflow: 'Create Workflow',
          nodeCount: 'Node Count:',
          createdAt: 'Created At:',
          viewStatus: 'View Status',
          viewResults: 'View Results',
          clone: 'Clone',
          deleteWorkflow: 'Delete',
          loading: 'Loading workflow list...',
          loadError: 'Load Failed',
          retry: 'Retry',
          close: 'Close',
          refreshStatus: 'Refresh Status',
          refreshStatusFailed: 'Failed to refresh status'
        },
        inputData: 'Input Data Configuration',
        inputContent: 'Input Content',
        inputTextPlaceholder: 'Enter text content...',
        uploadImage: 'Upload Image',
        uploadAudio: 'Upload Audio',
        uploadFile: 'Upload File',
        clickToUpload: 'Click to upload image',
        clickToUploadAudio: 'Click to upload audio',
        clickToUploadFile: 'Click to upload file',
        supportedFormats: 'Supports JPG, PNG, GIF formats',
        audioFormats: 'Supports MP3, WAV, OGG formats',
        inputJson: 'JSON Data',
        jsonPlaceholder: 'Enter JSON format data...',
        jsonHint: 'Please enter valid JSON format data',
        configurationPanel: 'Configuration Panel',
        selectNodeToConfig: 'Select Node to Configure',
        configInstructions: 'Please follow these steps:',
        step1: 'Drag nodes from left sidebar to canvas',
        step2: 'Click on a node to select it',
        step3: 'Configure node parameters here',
        step4: 'Set input data (text, images, etc.)',
        tip1: 'LLM nodes support direct text input or image upload',
        tip2: 'Drag connection points to create data flows',
        tip3: 'Test and deploy workflow after configuration',
        testDeploy: {
          title: 'Test & Deploy',
          description: 'Test workflow functionality and deploy to production',
          workflowTesting: 'Workflow Testing',
          testWorkflow: 'Test Workflow',
          validateDAG: 'Validate DAG',
          performanceTest: 'Performance Test',
          deployment: 'Deployment',
          deploymentEnvironment: 'Deployment Environment',
          deployWorkflow: 'Deploy Workflow'
        },
        // Âø´Êç∑ÈîÆ
        shortcuts: {
          keyboardGuide: 'Keyboard Shortcuts Guide',
          editOperations: 'Edit Operations',
          workflowOperations: 'Workflow Operations',
          canvasOperations: 'Canvas Operations',
          undo: 'Undo',
          redo: 'Redo',
          copySelectedNode: 'Copy Selected Node',
          pasteNode: 'Paste Node',
          deleteSelectedNode: 'Delete Selected Node',
          saveWorkflow: 'Save Workflow',
          selectAllNodes: 'Select All Nodes',
          zoomCanvas: 'Zoom Canvas',
          moveCanvas: 'Move Canvas',
          selectNode: 'Select Node',
          dragNode: 'Drag Node',
          mouseWheel: 'Mouse Wheel',
          dragBlankArea: 'Drag Blank Area',
          clickNode: 'Click Node',
          dragToConnect: 'Drag to create connection'
        },
        // Áä∂ÊÄÅÂÄº
        statusValues: {
          ready: 'Ready',
          running: 'Running',
          completed: 'Completed',
          failed: 'Failed',
          empty: 'Empty',
          unnamed: 'Unnamed Workflow',
          deployed: 'Deployed',
          pending: 'Pending'
        },
        // Â∑•ÂÖ∑Ê†èÊåâÈíÆ
        toolbar: {
          clear: 'Clear',
          save: 'Save',
          saveWorkflow: 'Save Workflow',
          testWorkflow: 'Test Workflow',
          deployWorkflow: 'Deploy Workflow',
          designer: 'Designer',
          dagWorkflow: 'DAG Workflow'
        },
        // Áä∂ÊÄÅÁ≠õÈÄâÂô®
        statusFilters: {
          all: 'All',
          running: 'Running',
          completed: 'Completed',
          failed: 'Failed',
          pending: 'Pending'
        },
        // ËäÇÁÇπÊèèËø∞
        nodeDescriptions: {
          workflowStart: 'Workflow start',
          workflowEnd: 'Workflow end',
          conditionJudgment: 'Condition judgment',
          dataProcessing: 'Data processing',
          dataTransformation: 'Data transformation'
        },
        // Á´ØÂè£ÈÖçÁΩÆ
        ports: {
          trigger: 'trigger',
          result: 'result',
          input: 'input',
          output: 'output',
          true: 'true',
          false: 'false',
          prompt: 'prompt',
          response: 'response',
          audio: 'audio',
          text: 'text',
          image: 'image'
        },
        // È¢ùÂ§ñÁöÑÁøªËØëÈ°π
        inputPortsLabel: 'üîΩ Input:',
        outputPortsLabel: 'üîº Output:',
        generalConfig: 'General Configuration',
        retryCount: 'Retry Count',
        retryCountPlaceholder: '3',
        retryCountHelp: 'Number of retries when node execution fails',
        retryInterval: 'Retry Interval(ms)',
        retryIntervalPlaceholder: '1000',
        retryIntervalHelp: 'Wait time between each retry',
        executionTimeout: 'Execution Timeout(s)',
        executionTimeoutPlaceholder: '30',
        executionTimeoutHelp: 'Maximum wait time for node execution',
        errorHandling: 'Error Handling',
        errorHandlingHelp: 'Choose how to handle errors',
        fallbackValue: 'Fallback Value',
        fallbackValuePlaceholder: 'Default value to use on error',
        fallbackValueHelp: 'Fallback value when node execution fails',
        portNamePlaceholder: 'Port Name',
        portTypes: {
          text: 'Text',
          image: 'Image',
          audio: 'Audio',
          file: 'File',
          json: 'JSON'
        },
        unknown: 'Unknown',
        jsExpressionHelp: 'Supports JavaScript expressions, can reference input data using variable names',
        fromNode: 'From Node',
        toNode: 'To Node',
        connectionConfiguration: 'Connection Configuration',
        connectionPrompt: 'Connection Prompt',
        connectionPromptPlaceholder: 'Enter connection prompt for data transformation during passing...',
        connectionPromptTips: 'Connection prompt defines transformation logic for data passing between nodes, can include variables like {input_data}',
        connectionDescription: 'Connection Description',
        connectionDescPlaceholder: 'Describe this connection\'s purpose...',
        saveConnection: 'Save Connection',
        deleteConnection: 'Delete Connection'
      }
    },
    // Á§æÂå∫
    community: {
      title: 'Creative Community',
      subtitle: 'Share your creativity with the world',
      tabs: {
        feed: 'Feed',
        gallery: 'Gallery',
        events: 'Events',
        groups: 'Groups'
      },
      actions: {
        createPost: 'Create Post',
        like: 'Like',
        comment: 'Comment',
        share: 'Share',
        follow: 'Follow',
        joinGroup: 'Join Group',
        leaveGroup: 'Leave Group'
      },
      features: {
        connect: 'Creator Network',
        challenges: 'Creative Challenges',
        showcase: 'Portfolio Showcase'
      }
    },
    // Â∏ÇÂú∫
    marketplace: {
      title: 'Creative Marketplace',
      subtitle: 'Discover and trade digital creations',
      categories: {
        artworks: 'Artworks',
        music: 'Music',
        videos: 'Videos',
        tools: 'Tools'
      },
      actions: {
        buy: 'Buy',
        sell: 'Sell',
        addToCart: 'Add to Cart',
        checkout: 'Checkout'
      },
      features: {
        assets: 'Digital Assets',
        secure: 'Secure Trading',
        monetize: 'Monetize Creations'
      }
    },
    // ÂÖ≥‰∫é
    about: {
      title: 'About Labubu AI Platform',
      subtitle: 'Learn more about our platform and mission',
      sections: {
        mission: 'Our Mission',
        features: 'Key Features',
        technology: 'Technology Stack',
        team: 'Our Team'
      },
      features: {
        innovation: 'AI Innovation',
        collaboration: 'Community Spirit',
        growth: 'Creator Growth'
      }
    },
    // ÁôªÂΩï
    login: {
      title: 'LABUBU AI',
      username: 'Username',
      password: 'Password',
      usernamePlaceholder: 'Enter username',
      passwordPlaceholder: 'Enter password',
      rememberMe: 'Remember me',
      forgotPassword: 'Forgot password?',
      loginButton: 'Login',
      noAccount: 'Don\'t have an account?',
      registerNow: 'Register now',
      passwordError: 'Password must be at least 8 characters with letters and special characters',
      forgotMessage: 'Please contact admin to reset password.',
      registerMessage: 'Registration feature is not yet open.'
    },
    // Ê≥®ÂÜå
    register: {
      title: 'Create New Account',
      username: 'Username',
      email: 'Email',
      password: 'Password',
      confirmPassword: 'Confirm Password',
      verificationCode: 'Verification Code',
      usernamePlaceholder: 'Enter username',
      emailPlaceholder: 'Enter email',
      passwordPlaceholder: 'Enter password',
      confirmPasswordPlaceholder: 'Enter password again',
      codePlaceholder: 'Enter verification code',
      getCode: 'Get Code',
      registerButton: 'Register',
      hasAccount: 'Already have an account?',
      goLogin: 'Go to login',
      completeInfo: 'Please fill in complete information',
      usernameError: 'Username must be 4-20 characters (letters, numbers, or underscores)',
      emailError: 'Please enter a valid email address',
      passwordError: 'Password must be at least 8 characters with letters and special characters',
      confirmError: 'The two passwords do not match',
      codeError: 'Please enter verification code',
      registerSuccess: 'Registration feature is pending backend integration, form validation passed!'
    }
  },
  zh: {
    // ÂØºËà™
    nav: {
      home: 'È¶ñÈ°µ',
      aiAgent: 'AIÊô∫ËÉΩ‰Ωì',
      community: 'Á§æÂå∫',
      marketplace: 'Â∏ÇÂú∫',
      about: 'ÂÖ≥‰∫é',
      login: 'ÁôªÂΩï',
      register: 'Ê≥®ÂÜå'
    },
    // ÈÄöÁî®
    common: {
      back: 'ËøîÂõû',
      save: '‰øùÂ≠ò',
      cancel: 'ÂèñÊ∂à',
      confirm: 'Á°ÆËÆ§',
      delete: 'Âà†Èô§',
      edit: 'ÁºñËæë',
      submit: 'Êèê‰∫§',
      loading: 'Âä†ËΩΩ‰∏≠...',
      error: 'ÈîôËØØ',
      success: 'ÊàêÂäü',
      warning: 'Ë≠¶Âëä',
      info: '‰ø°ÊÅØ',
      close: 'ÂÖ≥Èó≠',
      copy: 'Â§çÂà∂',
      regenerate: 'ÈáçÊñ∞ÁîüÊàê',
      upload: '‰∏ä‰º†',
      download: '‰∏ãËΩΩ',
      preview: 'È¢ÑËßà',
      send: 'ÂèëÈÄÅ',
      clear: 'Ê∏ÖÈô§',
      search: 'ÊêúÁ¥¢',
      filter: 'Á≠õÈÄâ',
      sort: 'ÊéíÂ∫è',
      language: 'ËØ≠Ë®Ä'
    },
    // È¶ñÈ°µ
    home: {
      title: 'Ê¨¢ËøéÊù•Âà∞Labubu AIÂπ≥Âè∞',
      subtitle: 'ÂàõÈÄ†„ÄÅÂàÜ‰∫´ÂíåÊé¢Á¥¢AIÁîüÊàêÂÜÖÂÆπ',
      buildAgent: 'ÊûÑÂª∫Êô∫ËÉΩ‰Ωì',
      learnMore: '‰∫ÜËß£Êõ¥Â§ö',
      features: {
        aiAgent: 'AIÊô∫ËÉΩ‰ΩìÂ∑•‰ΩúÂÆ§',
        community: 'ÂàõÊÑèÁ§æÂå∫',
        marketplace: 'Êï∞Â≠óÂ∏ÇÂú∫'
      },
      descriptions: {
        aiAgent: '‰ΩøÁî®Êàë‰ª¨Áõ¥ËßÇÁöÑÊãñÊãΩÂºèÂ∑•‰ΩúÊµÅÁºñËæëÂô®ÊûÑÂª∫ÂíåÂÆöÂà∂Êô∫ËÉΩAI‰ª£ÁêÜ„ÄÇÂàõÂª∫‰∏™ÊÄßÂåñËÅäÂ§©Êú∫Âô®‰∫∫ÔºåËá™Âä®ÂåñÂ§çÊùÇ‰ªªÂä°ÔºåÊï¥ÂêàÂ§öÁßçAIÊúçÂä°ÂåÖÊã¨Â§ßËØ≠Ë®ÄÊ®°Âûã„ÄÅÂõæÂÉèÁîüÊàê„ÄÅËØ≠Èü≥ÂêàÊàêÁ≠â„ÄÇÈÄÇÂêà‰ºÅ‰∏ö„ÄÅÂàõ‰ΩúËÄÖÂíåÂºÄÂèëËÄÖ‰ΩøÁî®„ÄÇ',
        community: 'Âä†ÂÖ•Áî±Âàõ‰ΩúËÄÖ„ÄÅËâ∫ÊúØÂÆ∂ÂíåAIÁà±Â•ΩËÄÖÁªÑÊàêÁöÑÊ¥ªË∑ÉÁ§æÂå∫„ÄÇÂàÜ‰∫´ÊÇ®ÁöÑÂàõ‰ΩúÔºåÂèëÁé∞Á≤æÂΩ©‰ΩúÂìÅÔºåÂèÇ‰∏éÊåëÊàòËµõÔºåÂçè‰ΩúÈ°πÁõÆÔºåÂêëÂêåË°åÂ≠¶‰π†„ÄÇÂú®Êàë‰ª¨ÁöÑÂàõÊÑèÁîüÊÄÅÁ≥ªÁªü‰∏≠ËøûÊé•„ÄÅÂêØÂèëÂπ∂Ëé∑ÂæóÁÅµÊÑü„ÄÇ',
        marketplace: 'Êé¢Á¥¢Âíå‰∫§ÊòìÁã¨ÁâπÁöÑÊï∞Â≠óÂàõ‰Ωú„ÄÅÂÆöÂà∂AI‰ª£ÁêÜ„ÄÅÊ®°ÊùøÂíåÂàõÊÑèËµÑ‰∫ß„ÄÇË¥≠‰π∞‰∏ì‰∏öÂ∑•ÂÖ∑ÔºåÂá∫ÂîÆÊÇ®ÁöÑÂàõÊñ∞‰ΩúÂìÅÔºåÂßîÊâòÂÆöÂà∂Â∑•‰ΩúÔºåÂú®Êàë‰ª¨ÂÆâÂÖ®ÁöÑÂ∏ÇÂú∫‰∏≠ÊâæÂà∞Â¢ûÂº∫ÂàõÊÑèÈ°πÁõÆÊâÄÈúÄÁöÑ‰∏ÄÂàá„ÄÇ',
        about: 'Labubu AIÂπ≥Âè∞ÊòØÁªìÂêàÂâçÊ≤øAIÊäÄÊúØ‰∏éÁ§æÂå∫Âçè‰ΩúÁöÑÁªàÊûÅÂàõÊÑèÁîüÊÄÅÁ≥ªÁªü„ÄÇÊàë‰ª¨ËµãËÉΩÂàõ‰ΩúËÄÖÊûÑÂª∫„ÄÅÂàÜ‰∫´ÂíåÂèòÁé∞‰ªñ‰ª¨ÁöÑÂàõÊñ∞ÔºåÂêåÊó∂Ëê•ÈÄ†ÊîØÊåÅÂ≠¶‰π†ÂíåÊàêÈïøÁöÑÁéØÂ¢É„ÄÇ'
      },
      contact: {
        title: 'ËÅîÁ≥ªÊàë‰ª¨',
        subtitle: 'ÂáÜÂ§áÂºÄÂßãÊÇ®ÁöÑÂàõÊÑè‰πãÊóÖ‰∫ÜÂêóÔºüÊàë‰ª¨ÈöèÊó∂‰∏∫ÊÇ®Êèê‰æõÂ∏ÆÂä©ÔºÅ',
        support: 'ËÅîÁ≥ªÊîØÊåÅ',
        discord: 'Âä†ÂÖ•Discord'
      }
    },

    // AI Agent
    aiAgent: {
      title: 'AIÊô∫ËÉΩ‰ΩìÂ∑•‰ΩúÂÆ§',
      subtitle: '‰∏ì‰∏öÁöÑAIÊô∫ËÉΩ‰ΩìÊûÑÂª∫Âπ≥Âè∞',
      tabs: {
        basic: 'Âü∫Á°Ä‰ø°ÊÅØ',
        prompt: 'ÊèêÁ§∫ËØçÊûÑÂª∫',
        knowledge: 'Áü•ËØÜÂ∫ì',
        workflow: 'Â∑•‰ΩúÊµÅ',
        multimodal: 'Â§öÊ®°ÊÄÅ',
        model: 'Ê®°ÂûãÈÖçÁΩÆ',
        test: 'ÊµãËØï‰∏éÈÉ®ÁΩ≤',
        workflowDesign: 'Â∑•‰ΩúÊµÅËÆæËÆ°',
        workflowDesignDesc: 'ÂèØËßÜÂåñDAGÂ∑•‰ΩúÊµÅÁºñËæëÂô® - Ê†∏ÂøÉÂäüËÉΩ',
        workflowManagement: 'Â∑•‰ΩúÊµÅÁÆ°ÁêÜ',
        workflowManagementDesc: 'Êü•ÁúãÂíåÁÆ°ÁêÜÊÇ®ÁöÑÊâÄÊúâDAGÂ∑•‰ΩúÊµÅ',
        testDeploy: 'ÊµãËØï‰∏éÈÉ®ÁΩ≤',
        testDeployDesc: 'ÊµãËØïÂíåÈÉ®ÁΩ≤ÂäüËÉΩ'
      },
      actions: {
        saveAgent: '‰øùÂ≠òÊô∫ËÉΩ‰Ωì',
        testAgent: 'ÊµãËØïÊô∫ËÉΩ‰Ωì',
        deployAgent: 'ÈÉ®ÁΩ≤Êô∫ËÉΩ‰Ωì',
        createNew: 'ÂàõÂª∫Êñ∞Êô∫ËÉΩ‰Ωì'
      },
      features: {
        workflow: 'ÂèØËßÜÂåñÂ∑•‰ΩúÊµÅÁºñËæë',
        multimodal: 'Â§öAIÊúçÂä°ÈõÜÊàê',
        automation: '‰ªªÂä°Ëá™Âä®Âåñ'
      },
      workflow: {
        nodeTypes: 'ËäÇÁÇπÁ±ªÂûã',
        controlNodes: 'ÊéßÂà∂ËäÇÁÇπ',
        aiServices: 'AIÊúçÂä°',
        toolNodes: 'Â∑•ÂÖ∑ËäÇÁÇπ',

        conditionDesc: 'Êù°‰ª∂Âà§Êñ≠',
        llmDesc: 'Â§ßËØ≠Ë®ÄÊ®°Âûã',
        sttDesc: 'ËØ≠Èü≥ËΩ¨ÊñáÂ≠ó',
        ttsDesc: 'ÊñáÂ≠óËΩ¨ËØ≠Èü≥',
        pic2textDesc: 'ÂõæÁâáËΩ¨ÊñáÂ≠ó',
        text2picDesc: 'ÊñáÂ≠óËΩ¨ÂõæÁâá',
        processDesc: 'Êï∞ÊçÆÂ§ÑÁêÜ',
        transformDesc: 'Êï∞ÊçÆËΩ¨Êç¢',
        nodeConfiguration: 'ËäÇÁÇπÈÖçÁΩÆ',
        nodeName: 'ËäÇÁÇπÂêçÁß∞',
        nodeNamePlaceholder: 'ËæìÂÖ•ËäÇÁÇπÂêçÁß∞',
        nodeDescription: 'ËäÇÁÇπÊèèËø∞',
        nodeDescPlaceholder: 'ÊèèËø∞ËäÇÁÇπÂäüËÉΩ',
        serviceType: 'ÊúçÂä°Á±ªÂûã',
        selectServiceType: 'ÈÄâÊã©ÊúçÂä°Á±ªÂûã',
        llmService: 'Â§ßËØ≠Ë®ÄÊ®°Âûã',
        sttService: 'ËØ≠Èü≥ËΩ¨ÊñáÂ≠ó',
        ttsService: 'ÊñáÂ≠óËΩ¨ËØ≠Èü≥',
        pic2textService: 'ÂõæÁâáËΩ¨ÊñáÂ≠ó',
        text2picService: 'ÊñáÂ≠óËΩ¨ÂõæÁâá',
        nodePrompt: 'ËäÇÁÇπÊèêÁ§∫ËØç',
        llmModel: 'LLMÊ®°Âûã',
        temperature: 'Ê∏©Â∫¶ÂÄº',
        conservative: '‰øùÂÆà',
        creative: 'ÂàõÈÄ†',
        voiceType: 'ËØ≠Èü≥Á±ªÂûã',
        language: 'ËØ≠Ë®Ä',
        imageSize: 'ÂõæÁâáÂ∞∫ÂØ∏',
        imageStyle: 'ÂõæÁâáÈ£éÊ†º',
        conditionExpression: 'Êù°‰ª∂Ë°®ËææÂºè',
        conditionPlaceholder: '‰æãÂ¶ÇÔºöresult.length > 0',
        inputOutput: 'ËæìÂÖ•ËæìÂá∫',
        inputPorts: 'ËæìÂÖ•Á´ØÂè£',
        outputPorts: 'ËæìÂá∫Á´ØÂè£',
        addInput: 'Ê∑ªÂä†ËæìÂÖ•',
        addOutput: 'Ê∑ªÂä†ËæìÂá∫',
        saveConfig: '‰øùÂ≠òÈÖçÁΩÆ',
        validateConfig: 'È™åËØÅÈÖçÁΩÆ',
        nameRequired: 'ËäÇÁÇπÂêçÁß∞‰∏çËÉΩ‰∏∫Á©∫',
        serviceRequired: 'ËØ∑ÈÄâÊã©ÊúçÂä°Á±ªÂûã',
        promptRequired: 'ËØ∑ÈÖçÁΩÆËäÇÁÇπÊèêÁ§∫ËØç',
        conditionRequired: 'ËØ∑ÈÖçÁΩÆÊù°‰ª∂Ë°®ËææÂºè',
        configSaved: 'ËäÇÁÇπÈÖçÁΩÆÂ∑≤‰øùÂ≠ò',
        workflowSaved: 'Â∑•‰ΩúÊµÅÂ∑≤‰øùÂ≠ò',
        saveFailed: '‰øùÂ≠òÂ∑•‰ΩúÊµÅÂ§±Ë¥•',
        testStarted: 'Â∑•‰ΩúÊµÅÊµãËØïÂ∑≤ÂêØÂä®',
        testFailed: 'ÊµãËØïÂ∑•‰ΩúÊµÅÂ§±Ë¥•',
        deploySuccess: 'Â∑•‰ΩúÊµÅÈÉ®ÁΩ≤ÊàêÂäü',
        deployFailed: 'ÈÉ®ÁΩ≤Â∑•‰ΩúÊµÅÂ§±Ë¥•',

        nodeConfigIncomplete: 'ËäÇÁÇπÈÖçÁΩÆ‰∏çÂÆåÊï¥',
        nodes: 'ËäÇÁÇπ',
        connections: 'ËøûÊé•',
        status: 'Áä∂ÊÄÅ',
        clearCanvas: 'Ê∏ÖÁ©∫ÁîªÂ∏É',
        saveWorkflow: '‰øùÂ≠òÂ∑•‰ΩúÊµÅ',
        testWorkflow: 'ÊµãËØïËøêË°å',
        deployWorkflow: 'ÈÉ®ÁΩ≤',
        zoomIn: 'ÊîæÂ§ß',
        zoomOut: 'Áº©Â∞è',
        resetZoom: 'ÈáçÁΩÆÁº©Êîæ',
        fitToScreen: 'ÈÄÇÂêàÂ±èÂπï',
        // ËäÇÁÇπÂêçÁß∞
        conditionNode: 'Êù°‰ª∂',
        llmNode: 'LLM',
        sttNode: 'STT',
        ttsNode: 'TTS',
        pic2textNode: 'ÂõæÁâáËΩ¨ÊñáÂ≠ó',
        text2picNode: 'ÊñáÂ≠óËΩ¨ÂõæÁâá',
        processNode: 'Â§ÑÁêÜ',
        transformNode: 'ËΩ¨Êç¢',
        // ËøûÊé•ÁÇπ
        inputPort: 'ÂÖ•',
        outputPort: 'Âá∫',
        // Ê®°ÂûãÈÄâÈ°π
        models: {
          gpt4: 'GPT-4',
          gpt35turbo: 'GPT-3.5 Turbo',
          claude3: 'Claude-3',
          llama2: 'Llama-2',
          whisper1: 'Whisper-1',
          tts1: 'TTS-1',
          tts1hd: 'TTS-1-HD',
          dalle3: 'DALL-E 3',
          dalle2: 'DALL-E 2'
        },
        // ËØ≠Èü≥ÈÄâÈ°π
        voices: {
          alloy: 'Alloy',
          echo: 'Echo',
          fable: 'Fable',
          onyx: 'Onyx',
          nova: 'Nova',
          shimmer: 'Shimmer'
        },
        // ËØ≠Ë®ÄÈÄâÈ°π
        languages: {
          chinese: '‰∏≠Êñá',
          english: 'Ëã±Êñá',
          japanese: 'Êó•Êñá',
          korean: 'Èü©Êñá'
        },
        // Ê†ºÂºèÈÄâÈ°π
        formats: {
          mp3: 'MP3',
          opus: 'Opus',
          aac: 'AAC',
          flac: 'FLAC',
          wav: 'WAV',
          pcm: 'PCM',
          json: 'JSON',
          text: 'ÊñáÊú¨',
          srt: 'SRT',
          verboseJson: 'ËØ¶ÁªÜJSON',
          vtt: 'VTT',
          plainText: 'Á∫ØÊñáÊú¨',
          markdown: 'Markdown',
          url: 'URLÈìæÊé•',
          base64: 'Base64ÁºñÁ†Å'
        },
        // ÈÖçÁΩÆÊ†áÁ≠æ
        labels: {
          maxTokens: 'ÊúÄÂ§ßTokenÊï∞',
          topP: 'Top P',
          ttsModel: 'TTSÊ®°Âûã',
          audioFormat: 'Èü≥È¢ëÊ†ºÂºè',
          speechSpeed: 'ËØ≠ÈÄü',
          sttModel: 'STTÊ®°Âûã',
          responseFormat: 'ÂìçÂ∫îÊ†ºÂºè',
          recognitionLanguage: 'ËØÜÂà´ËØ≠Ë®Ä',
          outputFormat: 'ËæìÂá∫Ê†ºÂºè',
          detailLevel: 'ËØ¶ÁªÜÁ®ãÂ∫¶',
          imageModel: 'ÂõæÁâáÊ®°Âûã',
          imageCount: 'ÂõæÁâáÊï∞Èáè',
          userIdentifier: 'Áî®Êà∑Ê†áËØÜ',
          conditionExpression: 'Êù°‰ª∂Ë°®ËææÂºè',
          retryCount: 'ÈáçËØïÊ¨°Êï∞',
          retryInterval: 'ÈáçËØïÈó¥Èöî(ms)',
          timeoutSeconds: 'Ë∂ÖÊó∂Êó∂Èó¥(s)',
          errorHandling: 'ÈîôËØØÂ§ÑÁêÜ',
          fallbackValue: 'Â§áÁî®ÂÄº',
          portName: 'Á´ØÂè£ÂêçÁß∞',
          dataType: 'Êï∞ÊçÆÁ±ªÂûã'
        },
        // Â∏ÆÂä©ÊñáÊú¨
        helpTexts: {
          stopSequences: 'LLMÈÅáÂà∞Ëøô‰∫õÂ∫èÂàóÊó∂Â∞ÜÂÅúÊ≠¢ÁîüÊàêÔºåÊØèË°å‰∏Ä‰∏™Â∫èÂàó',
          userIdForMonitoring: 'Áî®‰∫éÁõëÊéßÂíåÈò≤Êª•Áî®ÔºåÂª∫ËÆÆ‰ΩøÁî®UUID',
          logitBias: 'Ë∞ÉÊï¥ÁâπÂÆö‰ª§ÁâåÁöÑÂá∫Áé∞Ê¶ÇÁéáÔºåÊ†ºÂºè‰∏∫JSONÂØπË±°',
          audioFormatHelp: 'ÈÄâÊã©Èü≥È¢ëËæìÂá∫Ê†ºÂºèÔºåÂΩ±ÂìçÊñá‰ª∂Â§ßÂ∞èÂíåË¥®Èáè',
          maxTokensHelp: 'ÈôêÂà∂ËæìÂá∫ÊñáÊú¨ÁöÑÊúÄÂ§ßÈïøÂ∫¶',
          conditionHelp: 'ÊîØÊåÅJavaScriptË°®ËææÂºèÔºåÂèØ‰ΩøÁî®ÂèòÈáèÂêçÂºïÁî®ËæìÂÖ•Êï∞ÊçÆ',
          retryHelp: 'ËäÇÁÇπÊâßË°åÂ§±Ë¥•Êó∂ÁöÑÈáçËØïÊ¨°Êï∞',
          retryIntervalHelp: 'ÊØèÊ¨°ÈáçËØï‰πãÈó¥ÁöÑÁ≠âÂæÖÊó∂Èó¥',
          timeoutHelp: 'ËäÇÁÇπÊâßË°åÁöÑÊúÄÂ§ßÁ≠âÂæÖÊó∂Èó¥',
          errorHandlingHelp: 'ÈÄâÊã©ÈîôËØØÂèëÁîüÊó∂ÁöÑÂ§ÑÁêÜÊñπÂºè',
          fallbackHelp: 'ÂΩìËäÇÁÇπÊâßË°åÂ§±Ë¥•Êó∂‰ΩøÁî®ÁöÑÂ§áÁî®ÂÄº',
          imageCountHelp: '‰∏ÄÊ¨°ÁîüÊàêÁöÑÂõæÁâáÊï∞ÈáèÔºåDALL-E 3ÊúÄÂ§öÊîØÊåÅ1Âº†',
          userIdImageHelp: 'Áî®‰∫éÁõëÊéßÂíåÈò≤Êª•Áî®ÔºåÂª∫ËÆÆ‰ΩøÁî®UUID'
        },
        // Â∞∫ÂØ∏ÈÄâÈ°π
        imageSizes: {
          size256: '256x256',
          size512: '512x512',
          size1024: '1024x1024',
          size1792x1024: '1792x1024 (Ê®™Âêë)',
          size1024x1792: '1024x1792 (Á∫µÂêë)'
        },
        // Êï∞ÊçÆÁ±ªÂûã
        dataTypes: {
          text: 'ÊñáÊú¨',
          image: 'ÂõæÁâá',
          audio: 'Èü≥È¢ë',
          file: 'Êñá‰ª∂',
          json: 'JSON'
        },
        // ÈîôËØØÂ§ÑÁêÜÈÄâÈ°π
        errorHandlingOptions: {
          stop: 'ÂÅúÊ≠¢Â∑•‰ΩúÊµÅ',
          continue: 'ÁªßÁª≠ÊâßË°å',
          retry: 'ÈáçËØïÊâßË°å',
          fallback: '‰ΩøÁî®Â§áÁî®ÂÄº'
        },
        // ËØ¶ÁªÜÁ®ãÂ∫¶ÈÄâÈ°π
        detailLevels: {
          low: '‰Ωé - Âø´ÈÄüÂ§ÑÁêÜ',
          high: 'È´ò - ËØ¶ÁªÜÂàÜÊûê',
          auto: 'Ëá™Âä® - Êô∫ËÉΩÈÄâÊã©'
        },
        // ÁéØÂ¢ÉÈÄâÈ°π
        environments: {
          development: 'ÂºÄÂèëÁéØÂ¢É',
          testing: 'ÊµãËØïÁéØÂ¢É',
          production: 'Áîü‰∫ßÁéØÂ¢É'
        },
        // È°µÈù¢Ê†áÈ¢òÂíåÊèèËø∞
        workflowManagement: {
          title: 'Â∑•‰ΩúÊµÅÁÆ°ÁêÜ',
          description: 'Êü•ÁúãÂíåÁÆ°ÁêÜÊÇ®ÁöÑÊâÄÊúâDAGÂ∑•‰ΩúÊµÅ',
          runningLabel: 'ËøêË°å‰∏≠',
          totalWorkflows: 'ÊÄªÂ∑•‰ΩúÊµÅ',
          runningWorkflows: 'ËøêË°å‰∏≠',
          completedWorkflows: 'Â∑≤ÂÆåÊàê',
          failedWorkflows: 'Â§±Ë¥•',
          searchPlaceholder: 'ÊêúÁ¥¢Â∑•‰ΩúÊµÅ...',
          refresh: 'Âà∑Êñ∞',
          noWorkflows: 'ÊöÇÊó†Â∑•‰ΩúÊµÅ',
          noWorkflowsDescription: 'ÊÇ®ËøòÊ≤°ÊúâÂàõÂª∫‰ªª‰ΩïÂ∑•‰ΩúÊµÅÔºåÁé∞Âú®Â∞±ÂºÄÂßãËÆæËÆ°ÊÇ®ÁöÑÁ¨¨‰∏Ä‰∏™Â∑•‰ΩúÊµÅÂêßÔºÅ',
          createWorkflow: 'ÂàõÂª∫Â∑•‰ΩúÊµÅ',
          nodeCount: 'ËäÇÁÇπÊï∞:',
          createdAt: 'ÂàõÂª∫Êó∂Èó¥:',
          viewStatus: 'Êü•ÁúãÁä∂ÊÄÅ',
          viewResults: 'Êü•ÁúãÁªìÊûú',
          clone: 'Â§çÂà∂',
          deleteWorkflow: 'Âà†Èô§',
          loading: 'Ê≠£Âú®Âä†ËΩΩÂ∑•‰ΩúÊµÅÂàóË°®...',
          loadError: 'Âä†ËΩΩÂ§±Ë¥•',
          retry: 'ÈáçËØï',
          close: 'ÂÖ≥Èó≠',
          refreshStatus: 'Âà∑Êñ∞Áä∂ÊÄÅ',
          refreshStatusFailed: 'Âà∑Êñ∞Áä∂ÊÄÅÂ§±Ë¥•'
        },
        inputData: 'ËæìÂÖ•Êï∞ÊçÆÈÖçÁΩÆ',
        inputContent: 'ËæìÂÖ•ÂÜÖÂÆπ',
        inputTextPlaceholder: 'ËæìÂÖ•ÊñáÊú¨ÂÜÖÂÆπ...',
        uploadImage: '‰∏ä‰º†ÂõæÁâá',
        uploadAudio: '‰∏ä‰º†Èü≥È¢ë',
        uploadFile: '‰∏ä‰º†Êñá‰ª∂',
        clickToUpload: 'ÁÇπÂáª‰∏ä‰º†ÂõæÁâá',
        clickToUploadAudio: 'ÁÇπÂáª‰∏ä‰º†Èü≥È¢ë',
        clickToUploadFile: 'ÁÇπÂáª‰∏ä‰º†Êñá‰ª∂',
        supportedFormats: 'ÊîØÊåÅ JPG„ÄÅPNG„ÄÅGIF Ê†ºÂºè',
        audioFormats: 'ÊîØÊåÅ MP3„ÄÅWAV„ÄÅOGG Ê†ºÂºè',
        inputJson: 'JSONÊï∞ÊçÆ',
        jsonPlaceholder: 'ËæìÂÖ•JSONÊ†ºÂºèÊï∞ÊçÆ...',
        jsonHint: 'ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑJSONÊ†ºÂºèÊï∞ÊçÆ',
        configurationPanel: 'ÈÖçÁΩÆÈù¢Êùø',
        selectNodeToConfig: 'ÈÄâÊã©ËäÇÁÇπËøõË°åÈÖçÁΩÆ',
        configInstructions: 'ËØ∑ÊåâÁÖß‰ª•‰∏ãÊ≠•È™§Êìç‰ΩúÔºö',
        step1: '‰ªéÂ∑¶‰æßÊãñÊãΩËäÇÁÇπÂà∞ÁîªÂ∏É',
        step2: 'ÁÇπÂáªËäÇÁÇπËøõË°åÈÄâÊã©',
        step3: 'Âú®Ê≠§Â§ÑÈÖçÁΩÆËäÇÁÇπÂèÇÊï∞',
        step4: 'ËÆæÁΩÆËæìÂÖ•Êï∞ÊçÆÔºàÊñáÂ≠ó„ÄÅÂõæÁâáÁ≠âÔºâ',
        tip1: 'LLMËäÇÁÇπÊîØÊåÅÁõ¥Êé•ËæìÂÖ•ÊñáÂ≠óÊàñ‰∏ä‰º†ÂõæÁâá',
        tip2: 'ÊãñÊãΩËäÇÁÇπËøûÊé•ÁÇπÂèØ‰ª•ÂàõÂª∫Êï∞ÊçÆÊµÅ',
        tip3: 'ÈÖçÁΩÆÂÆåÊàêÂêéÂèØ‰ª•ÊµãËØïÂíåÈÉ®ÁΩ≤Â∑•‰ΩúÊµÅ',
        testDeploy: {
          title: 'ÊµãËØï‰∏éÈÉ®ÁΩ≤',
          description: 'ÊµãËØïÂ∑•‰ΩúÊµÅÂäüËÉΩÂπ∂ÈÉ®ÁΩ≤Âà∞Áîü‰∫ßÁéØÂ¢É',
          workflowTesting: 'Â∑•‰ΩúÊµÅÊµãËØï',
          testWorkflow: 'ÊµãËØïÂ∑•‰ΩúÊµÅ',
          validateDAG: 'È™åËØÅDAG',
          performanceTest: 'ÊÄßËÉΩÊµãËØï',
          deployment: 'ÈÉ®ÁΩ≤',
          deploymentEnvironment: 'ÈÉ®ÁΩ≤ÁéØÂ¢É',
          deployWorkflow: 'ÈÉ®ÁΩ≤Â∑•‰ΩúÊµÅ'
        },
        // Âø´Êç∑ÈîÆ
        shortcuts: {
          keyboardGuide: 'Âø´Êç∑ÈîÆÊåáÂçó',
          editOperations: 'ÁºñËæëÊìç‰Ωú',
          workflowOperations: 'Â∑•‰ΩúÊµÅÊìç‰Ωú',
          canvasOperations: 'ÁîªÂ∏ÉÊìç‰Ωú',
          undo: 'Êí§ÈîÄ',
          redo: 'ÈáçÂÅö',
          copySelectedNode: 'Â§çÂà∂ÈÄâ‰∏≠ËäÇÁÇπ',
          pasteNode: 'Á≤òË¥¥ËäÇÁÇπ',
          deleteSelectedNode: 'Âà†Èô§ÈÄâ‰∏≠ËäÇÁÇπ',
          saveWorkflow: '‰øùÂ≠òÂ∑•‰ΩúÊµÅ',
          selectAllNodes: 'ÈÄâÊã©ÊâÄÊúâËäÇÁÇπ',
          zoomCanvas: 'Áº©ÊîæÁîªÂ∏É',
          moveCanvas: 'ÁßªÂä®ÁîªÂ∏É',
          selectNode: 'ÈÄâÊã©ËäÇÁÇπ',
          dragNode: 'ÊãñÊãΩËäÇÁÇπ',
          mouseWheel: 'Èº†Ê†áÊªöËΩÆ',
          dragBlankArea: 'ÊãñÊãΩÁ©∫ÁôΩÂå∫Âüü',
          clickNode: 'ÁÇπÂáªËäÇÁÇπ',
          dragToConnect: 'Êåâ‰ΩèÊãñÊãΩÂàõÂª∫ËøûÊé•'
        },
        // Áä∂ÊÄÅÂÄº
        statusValues: {
          ready: 'Â∞±Áª™',
          running: 'ËøêË°å‰∏≠',
          completed: 'Â∑≤ÂÆåÊàê',
          failed: 'Â§±Ë¥•',
          empty: 'Á©∫ÁôΩ',
          unnamed: 'Êú™ÂëΩÂêçÂ∑•‰ΩúÊµÅ',
          deployed: 'Â∑≤ÈÉ®ÁΩ≤',
          pending: 'ÂæÖËøêË°å'
        },
        // Â∑•ÂÖ∑Ê†èÊåâÈíÆ
        toolbar: {
          clear: 'Ê∏ÖÁ©∫',
          save: '‰øùÂ≠ò',
          saveWorkflow: '‰øùÂ≠òÂ∑•‰ΩúÊµÅ',
          testWorkflow: 'ÊµãËØïÂ∑•‰ΩúÊµÅ',
          deployWorkflow: 'ÈÉ®ÁΩ≤Â∑•‰ΩúÊµÅ',
          designer: 'ËÆæËÆ°Âô®',
          dagWorkflow: 'DAGÂ∑•‰ΩúÊµÅ'
        },
        // Áä∂ÊÄÅÁ≠õÈÄâÂô®
        statusFilters: {
          all: 'ÂÖ®ÈÉ®',
          running: 'ËøêË°å‰∏≠',
          completed: 'Â∑≤ÂÆåÊàê',
          failed: 'Â§±Ë¥•',
          pending: 'ÂæÖËøêË°å'
        },
        // ËäÇÁÇπÊèèËø∞
        nodeDescriptions: {
          workflowStart: 'Â∑•‰ΩúÊµÅÂºÄÂßã',
          workflowEnd: 'Â∑•‰ΩúÊµÅÁªìÊùü',
          conditionJudgment: 'Êù°‰ª∂Âà§Êñ≠',
          dataProcessing: 'Êï∞ÊçÆÂ§ÑÁêÜ',
          dataTransformation: 'Êï∞ÊçÆËΩ¨Êç¢'
        },
        // Á´ØÂè£ÈÖçÁΩÆ
        ports: {
          trigger: 'Ëß¶ÂèëÂô®',
          result: 'ÁªìÊûú',
          input: 'ËæìÂÖ•',
          output: 'ËæìÂá∫',
          true: 'Áúü',
          false: 'ÂÅá',
          prompt: 'ÊèêÁ§∫',
          response: 'ÂìçÂ∫î',
          audio: 'Èü≥È¢ë',
          text: 'ÊñáÊú¨',
          image: 'ÂõæÁâá'
        },
        // È¢ùÂ§ñÁöÑÁøªËØëÈ°π
        inputPortsLabel: 'üîΩ ËæìÂÖ•:',
        outputPortsLabel: 'üîº ËæìÂá∫:',
        generalConfig: 'ÈÄöÁî®ÈÖçÁΩÆ',
        retryCount: 'ÈáçËØïÊ¨°Êï∞',
        retryCountPlaceholder: '3',
        retryCountHelp: 'ËäÇÁÇπÊâßË°åÂ§±Ë¥•Êó∂ÁöÑÈáçËØïÊ¨°Êï∞',
        retryInterval: 'ÈáçËØïÈó¥Èöî(ms)',
        retryIntervalPlaceholder: '1000',
        retryIntervalHelp: 'ÊØèÊ¨°ÈáçËØï‰πãÈó¥ÁöÑÁ≠âÂæÖÊó∂Èó¥',
        executionTimeout: 'Ë∂ÖÊó∂Êó∂Èó¥(s)',
        executionTimeoutPlaceholder: '30',
        executionTimeoutHelp: 'ËäÇÁÇπÊâßË°åÁöÑÊúÄÂ§ßÁ≠âÂæÖÊó∂Èó¥',
        errorHandling: 'ÈîôËØØÂ§ÑÁêÜ',
        errorHandlingHelp: 'ÈÄâÊã©ÈîôËØØÂèëÁîüÊó∂ÁöÑÂ§ÑÁêÜÊñπÂºè',
        fallbackValue: 'Â§áÁî®ÂÄº',
        fallbackValuePlaceholder: 'ÈîôËØØÊó∂‰ΩøÁî®ÁöÑÈªòËÆ§ÂÄº',
        fallbackValueHelp: 'ÂΩìËäÇÁÇπÊâßË°åÂ§±Ë¥•Êó∂‰ΩøÁî®ÁöÑÂ§áÁî®ÂÄº',
        portNamePlaceholder: 'Á´ØÂè£ÂêçÁß∞',
        portTypes: {
          text: 'ÊñáÊú¨',
          image: 'ÂõæÁâá',
          audio: 'Èü≥È¢ë',
          file: 'Êñá‰ª∂',
          json: 'JSON'
        },
        unknown: 'Êú™Áü•',
        jsExpressionHelp: 'ÊîØÊåÅJavaScriptË°®ËææÂºèÔºåÂèØ‰ΩøÁî®ÂèòÈáèÂêçÂºïÁî®ËæìÂÖ•Êï∞ÊçÆ',
        fromNode: 'Ê∫êËäÇÁÇπ',
        toNode: 'ÁõÆÊ†áËäÇÁÇπ',
        connectionConfiguration: 'ËøûÊé•ÈÖçÁΩÆ',
        connectionPrompt: 'ËøûÊé•ÊèêÁ§∫ËØç',
        connectionPromptPlaceholder: 'ËæìÂÖ•ËøûÊé•ÊèêÁ§∫ËØçÔºåÁî®‰∫éÂú®Êï∞ÊçÆ‰º†ÈÄíÊó∂ËøõË°åËΩ¨Êç¢ÊàñÂ§ÑÁêÜ...',
        connectionPromptTips: 'ËøûÊé•ÊèêÁ§∫ËØçÁî®‰∫éÂÆö‰πâÊï∞ÊçÆÂú®ËäÇÁÇπÈó¥‰º†ÈÄíÊó∂ÁöÑËΩ¨Êç¢ÈÄªËæëÔºåÂèØ‰ª•ÂåÖÂê´ÂèòÈáèÂ¶Ç {input_data}',
        connectionDescription: 'ËøûÊé•ÊèèËø∞',
        connectionDescPlaceholder: 'ÊèèËø∞Ê≠§ËøûÊé•ÁöÑ‰ΩúÁî®...',
        saveConnection: '‰øùÂ≠òËøûÊé•',
        deleteConnection: 'Âà†Èô§ËøûÊé•'
      }
    },
    // Á§æÂå∫
    community: {
      title: 'ÂàõÊÑèÁ§æÂå∫',
      subtitle: '‰∏é‰∏ñÁïåÂàÜ‰∫´ÊÇ®ÁöÑÂàõÊÑè',
      tabs: {
        feed: 'Âä®ÊÄÅ',
        gallery: '‰ΩúÂìÅÈõÜ',
        events: 'Ê¥ªÂä®',
        groups: 'Áæ§ÁªÑ'
      },
      actions: {
        createPost: 'ÂèëÂ∏ÉÂä®ÊÄÅ',
        like: 'ÁÇπËµû',
        comment: 'ËØÑËÆ∫',
        share: 'ÂàÜ‰∫´',
        follow: 'ÂÖ≥Ê≥®',
        joinGroup: 'Âä†ÂÖ•Áæ§ÁªÑ',
        leaveGroup: 'ÈÄÄÂá∫Áæ§ÁªÑ'
      },
      features: {
        connect: 'Âàõ‰ΩúËÄÖÁΩëÁªú',
        challenges: 'ÂàõÊÑèÊåëÊàòËµõ',
        showcase: '‰ΩúÂìÅÂ±ïÁ§∫'
      }
    },
    // Â∏ÇÂú∫
    marketplace: {
      title: 'ÂàõÊÑèÂ∏ÇÂú∫',
      subtitle: 'ÂèëÁé∞Âíå‰∫§ÊòìÊï∞Â≠óÂàõ‰Ωú',
      categories: {
        artworks: 'Ëâ∫ÊúØ‰ΩúÂìÅ',
        music: 'Èü≥‰πê',
        videos: 'ËßÜÈ¢ë',
        tools: 'Â∑•ÂÖ∑'
      },
      actions: {
        buy: 'Ë¥≠‰π∞',
        sell: 'Âá∫ÂîÆ',
        addToCart: 'Âä†ÂÖ•Ë¥≠Áâ©ËΩ¶',
        checkout: 'ÁªìÁÆó'
      },
      features: {
        assets: 'Êï∞Â≠óËµÑ‰∫ß',
        secure: 'ÂÆâÂÖ®‰∫§Êòì',
        monetize: '‰ΩúÂìÅÂèòÁé∞'
      }
    },
    // ÂÖ≥‰∫é
    about: {
      title: 'ÂÖ≥‰∫éLabubu AIÂπ≥Âè∞',
      subtitle: '‰∫ÜËß£Êàë‰ª¨ÁöÑÂπ≥Âè∞Âíå‰ΩøÂëΩ',
      sections: {
        mission: 'Êàë‰ª¨ÁöÑ‰ΩøÂëΩ',
        features: 'Ê†∏ÂøÉÂäüËÉΩ',
        technology: 'ÊäÄÊúØÊ†à',
        team: 'Êàë‰ª¨ÁöÑÂõ¢Èòü'
      },
      features: {
        innovation: 'AIÂàõÊñ∞ÊäÄÊúØ',
        collaboration: 'Á§æÂå∫Âçè‰Ωú',
        growth: 'Âàõ‰ΩúËÄÖÊàêÈïø'
      }
    },
    // ÁôªÂΩï
    login: {
      title: 'LABUBU AI',
      username: 'Áî®Êà∑Âêç',
      password: 'ÂØÜÁ†Å',
      usernamePlaceholder: 'ËØ∑ËæìÂÖ•Áî®Êà∑Âêç',
      passwordPlaceholder: 'ËØ∑ËæìÂÖ•ÂØÜÁ†Å',
      rememberMe: 'ËÆ∞‰ΩèÊàë',
      forgotPassword: 'ÂøòËÆ∞ÂØÜÁ†ÅÔºü',
      loginButton: 'ÁôªÂΩï',
      noAccount: 'ËøòÊ≤°ÊúâË¥¶Âè∑Ôºü',
      registerNow: 'Ê≥®ÂÜåÊñ∞Ë¥¶Âè∑',
      passwordError: 'ÂØÜÁ†ÅÈúÄËá≥Â∞ë8‰ΩçÔºå‰∏îÂåÖÂê´Ëã±ÊñáÂíåÁâπÊÆäÂ≠óÁ¨¶',
      forgotMessage: 'ËØ∑ËÅîÁ≥ªÁÆ°ÁêÜÂëòÈáçÁΩÆÂØÜÁ†Å„ÄÇ',
      registerMessage: 'Ê≥®ÂÜåÂäüËÉΩÊöÇÊú™ÂºÄÊîæ„ÄÇ'
    },
    // Ê≥®ÂÜå
    register: {
      title: 'Ê≥®ÂÜåÊñ∞Ë¥¶Âè∑',
      username: 'Áî®Êà∑Âêç',
      email: 'ÈÇÆÁÆ±',
      password: 'ÂØÜÁ†Å',
      confirmPassword: 'Á°ÆËÆ§ÂØÜÁ†Å',
      verificationCode: 'È™åËØÅÁ†Å',
      usernamePlaceholder: 'ËØ∑ËæìÂÖ•Áî®Êà∑Âêç',
      emailPlaceholder: 'ËØ∑ËæìÂÖ•ÈÇÆÁÆ±',
      passwordPlaceholder: 'ËØ∑ËæìÂÖ•ÂØÜÁ†Å',
      confirmPasswordPlaceholder: 'ËØ∑ÂÜçÊ¨°ËæìÂÖ•ÂØÜÁ†Å',
      codePlaceholder: 'ËØ∑ËæìÂÖ•È™åËØÅÁ†Å',
      getCode: 'Ëé∑ÂèñÈ™åËØÅÁ†Å',
      registerButton: 'Ê≥®ÂÜå',
      hasAccount: 'Â∑≤ÊúâË¥¶Âè∑Ôºü',
      goLogin: 'ÂéªÁôªÂΩï',
      completeInfo: 'ËØ∑Â°´ÂÜôÂÆåÊï¥‰ø°ÊÅØ',
      usernameError: 'Áî®Êà∑ÂêçÈúÄ‰∏∫4-20‰ΩçÂ≠óÊØç„ÄÅÊï∞Â≠óÊàñ‰∏ãÂàíÁ∫ø',
      emailError: 'ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑÈÇÆÁÆ±Âú∞ÂùÄ',
      passwordError: 'ÂØÜÁ†ÅÈúÄËá≥Â∞ë8‰ΩçÔºå‰∏îÂåÖÂê´Ëã±ÊñáÂíåÁâπÊÆäÂ≠óÁ¨¶',
      confirmError: '‰∏§Ê¨°ËæìÂÖ•ÁöÑÂØÜÁ†Å‰∏ç‰∏ÄËá¥',
      codeError: 'ËØ∑ËæìÂÖ•È™åËØÅÁ†Å',
      registerSuccess: 'Ê≥®ÂÜåÂäüËÉΩÂæÖÊé•ÂÖ•ÂêéÁ´ØÔºåË°®ÂçïÊ†°È™åÈÄöËøáÔºÅ'
    }
  }
})

// ËØ≠Ë®ÄÁÆ°ÁêÜÁ±ª
class LanguageManager {
  constructor() {
    this.translations = translations
    this.init()
  }

  init() {
    // ‰ªéÊú¨Âú∞Â≠òÂÇ®Âä†ËΩΩËØ≠Ë®ÄËÆæÁΩÆ
    const savedLanguage = localStorage.getItem('language')
    if (savedLanguage && LANGUAGES[savedLanguage]) {
      currentLanguage.value = savedLanguage
    } else {
      // Ê£ÄÊµãÊµèËßàÂô®ËØ≠Ë®Ä
      const browserLanguage = navigator.language || navigator.userLanguage
      if (browserLanguage.startsWith('zh')) {
        currentLanguage.value = 'zh'
      } else {
        currentLanguage.value = 'en'
      }
    }
  }

  getCurrentLanguage() {
    return currentLanguage.value
  }

  setLanguage(lang) {
    if (LANGUAGES[lang]) {
      currentLanguage.value = lang
      localStorage.setItem('language', lang)
      document.documentElement.lang = lang
    }
  }

  getLanguages() {
    return LANGUAGES
  }

  t(key, defaultValue = '') {
    const keys = key.split('.')
    let value = translations[currentLanguage.value]
    
    for (const k of keys) {
      value = value?.[k]
      if (value === undefined) break
    }
    
    return value || defaultValue || key
  }

  // Ê£ÄÊü•ÊòØÂê¶‰∏∫‰∏≠Êñá
  isZh() {
    return currentLanguage.value === 'zh'
  }

  // Ê£ÄÊü•ÊòØÂê¶‰∏∫Ëã±Êñá
  isEn() {
    return currentLanguage.value === 'en'
  }
}

// ÂàõÂª∫ÂÖ®Â±ÄËØ≠Ë®ÄÁÆ°ÁêÜÂÆû‰æã
const languageManager = new LanguageManager()

// ÂØºÂá∫
export { languageManager, currentLanguage, LANGUAGES }
export default languageManager 