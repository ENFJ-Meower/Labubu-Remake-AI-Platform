from fastapi import FastAPI
from pydantic import BaseModel
import os
import httpx
import asyncio
from concurrent.futures import ThreadPoolExecutor
from typing import Dict, Optional
from google import genai
from google.genai import types
import aioboto3
import base64

app = FastAPI(title="AI Agent Microservice API", description="Text-to-Picture API")

class Text2ImageRequest(BaseModel):
    prompt: str
    input_url: str
    edge_url: Dict[str, Dict[str, str]]
    target_url: str

class Text2ImageResponse(BaseModel):
    success: bool
    message: str
    image_url: Optional[str] = None

GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
AWS_SESSION_TOKEN = os.getenv("AWS_SESSION_TOKEN")
AWS_REGION = os.getenv("AWS_REGION", "us-east-1")

executor = ThreadPoolExecutor(max_workers=8)

async def download_text_if_text(url: str) -> Optional[str]:
    try:
        async with httpx.AsyncClient(timeout=30) as client:
            resp = await client.get(url)
            resp.raise_for_status()
            content_type = resp.headers.get("content-type", "").lower()
            if content_type.startswith("text/") or "json" in content_type or content_type == "application/x-www-form-urlencoded":
                return resp.text
            return None
    except Exception:
        return None

def call_gemini_text2image(prompt: str) -> (Optional[bytes], Optional[str]):
    if not GOOGLE_API_KEY:
        return None, "GOOGLE_API_KEY environment variable is not set."
    try:
        client = genai.Client(api_key=GOOGLE_API_KEY)
        response = client.models.generate_content(
            model="gemini-2.0-flash-preview-image-generation",
            contents=prompt,
            config=types.GenerateContentConfig(
                response_modalities=['TEXT', 'IMAGE']
            )
        )
        for part in response.candidates[0].content.parts:
            if hasattr(part, 'inline_data') and part.inline_data is not None:
                data = part.inline_data.data
                if isinstance(data, bytes):
                    img_bytes = data
                else:
                    try:
                        img_bytes = base64.b64decode(data)
                    except Exception as e:
                        return None, f"Base64 decode failed: {str(e)}"
                return img_bytes, None
        return None, "No image data found in Gemini API response."
    except Exception as e:
        return None, f"Image extraction failed: {str(e)}"

async def upload_image_to_s3_async(image_bytes: bytes, s3_url: str) -> str:
    if not s3_url.startswith("s3://"):
        raise ValueError("target_url must start with s3://")
    _, path = s3_url.split("s3://", 1)
    bucket, key = path.split("/", 1)
    session = aioboto3.Session()
    async with session.client(
        's3',
        aws_access_key_id=AWS_ACCESS_KEY_ID,
        aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
        aws_session_token=AWS_SESSION_TOKEN,
        region_name=AWS_REGION
    ) as s3_client:
        await s3_client.put_object(Bucket=bucket, Key=key, Body=image_bytes, ContentType="image/png")
    return f"https://{bucket}.s3.{AWS_REGION}.amazonaws.com/{key}"

@app.post("/api/v1", response_model=Text2ImageResponse)
async def text2image_endpoint(request: Text2ImageRequest):
    texts = []
    # 1. input_url
    input_text = await download_text_if_text(request.input_url)
    if input_text:
        texts.append(request.prompt + "\n" + input_text)
    # 2. edge_url
    for node, info in (request.edge_url or {}).items():
        url = info.get("URL")
        prompt = info.get("prompt", "")
        if url:
            edge_text = await download_text_if_text(url)
            if edge_text:
                texts.append(prompt + "\n" + edge_text)
    if not texts:
        return Text2ImageResponse(success=False, message="No valid text found in any link.", image_url=None)
    final_prompt = "\n\n".join(texts)
    try:
        loop = asyncio.get_event_loop()
        image_bytes, err = await loop.run_in_executor(executor, call_gemini_text2image, final_prompt)
        if err:
            return Text2ImageResponse(success=False, message=err, image_url=None)
        if not image_bytes:
            return Text2ImageResponse(success=False, message="No image generated by Gemini API.", image_url=None)
        s3_written_url = await upload_image_to_s3_async(image_bytes, request.target_url)
        return Text2ImageResponse(success=True, message="Success", image_url=s3_written_url)
    except Exception as e:
        return Text2ImageResponse(success=False, message=f"Image generation failed: {str(e)}", image_url=None)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("ttp:app", host="0.0.0.0", port=8000, reload=True)
